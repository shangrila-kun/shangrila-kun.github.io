<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shangrila-kun Blog</title>
  
  <subtitle>Full of passion to meet every day</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shangrila-kun.github.io/"/>
  <updated>2018-03-24T11:18:09.904Z</updated>
  <id>https://shangrila-kun.github.io/</id>
  
  <author>
    <name>Shangrila-kun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20180324linux基本基本命令</title>
    <link href="https://shangrila-kun.github.io/2018/03/24/20180324linux%E5%9F%BA%E6%9C%AC%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>https://shangrila-kun.github.io/2018/03/24/20180324linux基本基本命令/</id>
    <published>2018-03-24T10:52:47.000Z</published>
    <updated>2018-03-24T11:18:09.904Z</updated>
    
    <content type="html"><![CDATA[<p>​    学号linux不是一件一蹴而就的事情，一定要坚持坚持再坚持。自己每每感觉学习linux是一个长期的过程，很耗时间，本文主要记载在学习中一些命令的使用及介绍，以供自己温故而知新。</p><a id="more"></a><h2 id="vim的使用技巧"><a href="#vim的使用技巧" class="headerlink" title="vim的使用技巧"></a>vim的使用技巧</h2><p><strong>编辑文档操作</strong></p><blockquote><p>x:删除光标当前字符<br>dd:删除一行<br>ndd:删除n行（n为数字）<br>d$删除光标至行尾。<br>u:撤销上一步操作，可以多次使用，如输入两个u，表示撤销2步。<br>rx:将当前光标字符替换为x<br>yy:复制当前行。<br>p:粘贴至当前行之后。<br>P：粘贴至当前行之前。<br>J:删除换行符，可以将两行合并为一行。<br>VIM查找与替换<br>/host,从上望下查。 /?关键词从下往上查。<br>：1,$s/xxx/yyy/ 将从第一行至尾行内的xxx替换成yyy。<br>：s/root/admin/ 将光标当前行中第一个出现root替换为admin<br>：s/root/admin/g 将当前行中所有的root替换为admin<br>：3,5 s/sbin/bin/g将3到5行之间的所有sbin替换为bin</p></blockquote><p><strong>vim光标操作</strong></p><blockquote><p>h:光标向左移动一位<br>j:光标向下移动一行（以回车为换行符）<br>k:光标向上移动一行。<br>l:光标向右移动一行。<br>gg:光标移动至文件首行。<br>G：光标移动至文件末尾。<br>nG:移动光标至n行。<br>^:光标移动至当前行的首字符。<br>$:光标移动至行前行的尾字符。<br>fx:光标移至当前行的下一个x字符处。<br>Fx:光标移至当前行的上一个x字符处。<br>W:光标向右移动一个单词。<br>nw：光标向右移动n个单词。<br>b:光标向左移动一个单词。<br>nb：光标向左移动n个单词。</p></blockquote><p><strong>vim保存与退出</strong></p><blockquote><p>：q! 不保存并 ：wq 保存并退出  ：x 保存并退出 ：w 保存<br>：w b.txt 另存为b.txt<br> :set ignorecase 查找时不区分大小写<br>vim多窗口编辑<br>：split可以同一个文档的不同行。Ctrl+w+j跳转至上面一个窗口<br>Ctrl+w+k跳转至下一个窗口。<br>：split second.txt 打开新的文件。</p></blockquote><h2 id="ps-aux-grep-xxx详解"><a href="#ps-aux-grep-xxx详解" class="headerlink" title="ps aux|grep xxx详解"></a>ps aux|grep xxx详解</h2><blockquote><p>对进程进行监测和控制,首先必须要了解当前进程的情况,也就是需要查看当前进程, 而ps命令（Process Status）就是最基本同时也是非常强大的进程查看命令.使用该命令 可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵尸、哪些进程占用了过多的资源等等.总之大部分信息都是可以通过执行该命令得到的。</p><p>ps 为我们提供了进程的一次性的查看，它所提供的查看结果并不动态连续的；如果想对进程时间监控，应该用 top 工具。</p><p>如果直接用ps命令，会显示所有进程的状态，通常结合grep命令查看某进程的状态。</p></blockquote><p><strong>grep</strong></p><blockquote><p>grep （global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> ps -aux|grep nginx</div><div class="line"> root     25001  0.0  0.0 122036  1460 ?        Sl   02:00   0:34 /usr/local/middleware/Git_NTP_APQTS_Code_Mid_MIS/LL/application/bin</div><div class="line">root     25003  2.8  8.1 3533580 316088 ?      Sl   02:00  29:34 /usr/local/java/jdk1.8.0_144/bin/java -Djava.util.logging.config.fi</div><div class="line">root     25272  0.0  0.0 122036  1456 ?        Sl   02:06   0:34 /usr/local/middleware/Git_NTP_APQTS_Code_Mid_MIS_Simp/AGP/application/bin</div></pre></td></tr></table></figure><blockquote><p>运行 ps aux 的到如下信息：</p><p>   ps aux</p><p>USER    PID   %CPU %MEM VSZ   RSS TTY    STAT   START TIME COMMAND</p><p>stat 中的参数意义如下：<br>   D 不可中断 Uninterruptible（usually IO）<br>   R 正在运行，或在队列中的进程<br>   S 处于休眠状态<br>   T 停止或被追踪<br>   Z 僵尸进程<br>   W 进入内存交换（从内核2.6开始无效）<br>   X   死掉的进程</p><p>&lt; 高优先级<br>n   低优先级<br>s   包含子进程</p><p>+位于后台的进程组</p></blockquote><h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><blockquote><p>ps命令</p><p>要对进程进行监测和控制,首先必须要了解当前进程的情况,也就是需要查看当前进程,而ps命令就是最基本同时也是非常强大的进程查看命令.使用该命令可以确定有哪些<strong>进程正在运行和运行的状态、进程是否结束、进程有没有僵尸、哪些进程占用了过多的资源等等</strong>.总之大部分信息都是可以通过执行该命令得到的.</p><p>ps命令最常用的还是用于监控后台进程的工作情况,因为后台进程是不和屏幕键盘这些标准输入/输出设备进行通信的,所以如果需要检测其情况,便可以使用ps命令了.</p><p> 1）ps a 显示现行终端机下的所有程序，包括其他用户的程序。</p><p>2）ps -A 显示所有程序。</p><p>3）ps c 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。</p><p>4）ps -e 此参数的效果和指定”A”参数相同。</p><p>5）ps e 列出程序时，显示每个程序所使用的环境变量。</p><p>6）ps f 用ASCII字符显示树状结构，表达程序间的相互关系。</p><p>7）ps -H 显示树状结构，表示程序间的相互关系。</p><p>8）ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。</p><p>9）ps s 采用程序信号的格式显示程序状况。</p><p>10）ps S 列出程序时，包括已中断的子程序资料。</p><p>11）ps -t&lt;终端机编号&gt; 　指定终端机编号，并列出属于该终端机的程序的状况。</p><p>12）ps u 　以用户为主的格式来显示程序状况。</p><p>13）ps x 　显示所有程序，不以终端机来区分。</p><p>最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。</p><p>linux上进程有5种状态:</p><p>\1. 运行(正在运行或在运行队列中等待)</p><p>\2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</p><p>\3. 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</p><p>\4. 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</p><p>\5. 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</p><p>ps工具标识进程的5种状态码:</p><p>D 不可中断 uninterruptible sleep (usually IO)</p><p>R 运行 runnable (on run queue)</p><p>S 中断 sleeping</p><p>T 停止 traced or stopped</p><p>Z 僵死 a defunct (”zombie”) process</p><p>注: 其它状态还包括W(无驻留页), &lt;(高优先级进程), N(低优先级进程), L(内存锁页).</p><p>使用ps格式输出来查看进程状态:</p><p>ps -eo user,stat..,cmd</p><p>user 用户名</p><p>uid 用户号</p><p>pid 进程号</p><p>ppid 父进程号</p><p>size 内存大小, Kbytes字节.</p><p>vsize 总虚拟内存大小, bytes字节(包含code+data+stack)</p><p>share 总共享页数</p><p>nice 进程优先级(缺省为0, 最大为-20)</p><p>priority(pri) 内核调度优先级</p><p>pmem 进程分享的物理内存数的百分比</p><p>trs 程序执行代码驻留大小</p><p>rss 进程使用的总物理内存数, Kbytes字节</p><p>time 进程执行起到现在总的CPU暂用时间</p><p>stat 进程状态</p><p>cmd(args) 执行命令的简单格式</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    学号linux不是一件一蹴而就的事情，一定要坚持坚持再坚持。自己每每感觉学习linux是一个长期的过程，很耗时间，本文主要记载在学习中一些命令的使用及介绍，以供自己温故而知新。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://shangrila-kun.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="linux基本命令" scheme="https://shangrila-kun.github.io/tags/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>面向对象3</title>
    <link href="https://shangrila-kun.github.io/2018/03/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A13/"/>
    <id>https://shangrila-kun.github.io/2018/03/17/面向对象3/</id>
    <published>2018-03-17T04:58:45.000Z</published>
    <updated>2018-03-23T13:19:31.125Z</updated>
    
    <content type="html"><![CDATA[<p>​    本篇主要介绍了抽象类、</p><a id="more"></a><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p>为什么使用抽象类</p><p>​    1：定义Dog类</p><p>​        有颜色属性和叫的方法</p><p>​    2：定义Bird类</p><p>​        有颜色属性和叫的方法</p><p>​    3：定义其父类Animal</p><p>​        1：抽取共性颜色属性和叫的方法</p><p>​            1：颜色的属性可以使用默认初始化值。</p><p>​            2：叫的方法在父类中如何定义？</p><p>​                1：狗是旺旺</p><p>​                2：鸟是叽叽喳喳</p><p>​                3：可以将父类的方法定义为狗叫让鸟继承父类重写叫的方法</p><p>​                    1：鸟怎么确定是否要重写父类方法。</p><p>2：不重写，编译和运行都没有问题，只是执行鸟叫的方法就会出现狗叫</p><p>​                4：父类的方法很难确定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">&gt; String color;</div><div class="line">&gt;</div><div class="line">&gt; <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">&gt;</div><div class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</div><div class="line">&gt; System.out.println(<span class="string">"旺旺"</span>);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">&gt;</div><div class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</div><div class="line">&gt; System.out.println(<span class="string">"叽叽喳喳"</span>);</div><div class="line">&gt; &#125;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote></blockquote><h3 id="抽象类的介绍"><a href="#抽象类的介绍" class="headerlink" title="抽象类的介绍"></a>抽象类的介绍</h3><blockquote><p>5：当描述一个类的时候，如果不能确定功能函数如何定义，那么该类就可以定义为抽象类，功能函数应该描述为抽象函数。</p><p>6：抽象类的特点</p><p>​            1：有抽象函数的类，该类一定是抽象类。</p><p>​            2：抽象类中不一定要有抽象函数。</p><p>​            3：抽象类不能使用new创建对象</p><p>​                1：创建对象，使用对象的功能，抽象类的方法，没有方法体。</p><p>​            4：抽象类主要为了提高代码的复用性，让子类继承来使用。</p><p>​            5：编译器强制子类实现抽象类父类的未实现的方法。</p><p>​                1：可以不实现，前提是子类的也要声明为抽象的。</p><p>7：抽象的优点</p><p>​    1：提高代码复用性</p><p>​            2：强制子类实现父类中没有实现的功能</p><p>​            2：提高代码的扩展性，便于后期的代码维护</p><p>8：抽象类不能创建对象，那么抽象类中是否有构造函数？</p><p>​    1：抽象类中一定有构造函数。主要为了初始化抽象类中的属性。通常由子类实现。</p><p>9：final和abstract是否可以同时修饰一个类？  </p><p>​    一定不能同时修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">&gt;</div><div class="line">&gt; String name;</div><div class="line">&gt;</div><div class="line">&gt; <span class="comment">// 抽象类可以有构造函数</span></div><div class="line">&gt; Animal() &#123;</div><div class="line">&gt;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; Animal(String name) &#123;</div><div class="line">&gt; <span class="keyword">this</span>.name = name;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</div><div class="line">&gt;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">&gt; Dog() &#123;</div><div class="line">&gt;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; Dog(String name) &#123;</div><div class="line">&gt; <span class="keyword">super</span>(name);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</div><div class="line">&gt; System.out.println(<span class="string">"旺旺"</span>);</div><div class="line">&gt;</div><div class="line">&gt; &#125;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</div><div class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">&gt; <span class="comment">// 抽象类不能创建对象</span></div><div class="line">&gt; <span class="comment">// Animal a=new Animal();</span></div><div class="line">&gt; Dog d = <span class="keyword">new</span> Dog(<span class="string">"旺财"</span>);</div><div class="line">&gt; System.out.println();</div><div class="line">&gt; &#125;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote></blockquote><h3 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h3><blockquote><p>抽象类可以没有抽象方法（java.awt.*的类就是这样子操作的）。</p><p>抽象类可以继承普通类与抽象类。</p><p>抽象类不能直接使用类名创建实例，但是有构造方法，构造方法是让子类进行初始化。</p><p>抽象类一定有构造方法。</p><p>abstract与其他修饰符的关系:</p><p>​    <strong>final</strong>与abstract不能共存:</p><p>​        final:它的作用  修饰类代表不可以继承  修饰方法不可重写</p><p>​        abstract修饰类就是用来被继承的，修饰方法就是用来被重写的。</p><p>​    <strong>static</strong> static修饰的方法可以用类名调用，</p><p>​         对于abstract修饰的方法没有具体的方法实现，所有不能直接调用，</p><p>​        也就是说不可以与static共存。</p><p>​    <strong>private<em>**</em></strong></p><p>​        private修饰的只能在本类中使用，</p><p>​        abstract方法是用来被子类进行重写的，有矛盾</p><p>​        所有不能共存.</p><p>练习：使用抽象类计算一个矩形与圆形的面积。</p></blockquote><p>##四种类型的值交换</p><h3 id="基本类型的交换"><a href="#基本类型的交换" class="headerlink" title="基本类型的交换"></a>基本类型的交换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">int</span> a=<span class="number">10</span>;  </div><div class="line">        <span class="keyword">int</span> b=<span class="number">20</span>;  </div><div class="line">        System.out.println(<span class="string">"交换值之前：a="</span>+a+<span class="string">" "</span>+<span class="string">" b="</span>+b);  </div><div class="line">        change(a, b);  </div><div class="line">        System.out.println(<span class="string">"交换值之后：a="</span>+a+<span class="string">" "</span>+<span class="string">" b="</span>+b);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;  </div><div class="line">        <span class="keyword">int</span> temp=a;  </div><div class="line">        a=b;  </div><div class="line">        b=temp;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line"><span class="comment">//结果：发现交换值前后没有变量的值发生变化。</span></div></pre></td></tr></table></figure><p><strong>原因分析</strong></p><blockquote><p><img src="http://img.blog.csdn.net/20160716172413634?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p></blockquote><h3 id="数组类型的交换"><a href="#数组类型的交换" class="headerlink" title="数组类型的交换"></a>数组类型的交换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;  </div><div class="line">        <span class="keyword">int</span> [] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;  </div><div class="line">        System.out.println(<span class="string">"交换值之前："</span>+Arrays.toString(arr));  </div><div class="line">        change(arr, <span class="number">1</span>,<span class="number">3</span>);  </div><div class="line">        System.out.println(<span class="string">"交换值之后："</span>+Arrays.toString(arr));  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> []arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;  </div><div class="line">        <span class="keyword">int</span> temp=arr[i];  </div><div class="line">        arr[i]=arr[j];  </div><div class="line">        arr[j]=temp;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//结果：交换值成功。</span></div></pre></td></tr></table></figure><p><strong>原因分析</strong></p><blockquote><p><img src="http://img.blog.csdn.net/20160716172957082?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p></blockquote><h3 id="对象类型的交换"><a href="#对象类型的交换" class="headerlink" title="对象类型的交换"></a>对象类型的交换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Te</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> x=<span class="number">10</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Te</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.x = x;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;  </div><div class="line">        Te test=<span class="keyword">new</span> Te(<span class="number">1</span>);  </div><div class="line">        System.out.println(<span class="string">"交换值之前："</span>+test.x);  </div><div class="line">        change(test, <span class="number">4</span>);  </div><div class="line">        System.out.println(<span class="string">"交换值之后："</span>+test.x);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Te test,<span class="keyword">int</span> x)</span></span>&#123;  </div><div class="line">        test.x=x;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//结果：交换成功</span></div></pre></td></tr></table></figure><p><strong>原因分析</strong></p><blockquote><p><img src="http://img.blog.csdn.net/20160716173910338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p></blockquote><h3 id="字符串类型的值交换"><a href="#字符串类型的值交换" class="headerlink" title="字符串类型的值交换"></a>字符串类型的值交换</h3><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps8FB6.tmp.jpg" alt="img"></p><p>值交换失败。字符串中的值存在常量池中。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wps19F5.tmp.jpg" alt="img"></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wpsC747.tmp.jpg" alt="img"></p><blockquote><p>接口(interface)：usb接口，主要是使用来拓展笔记本的功能，那么在java中的接口主要是使用来拓展定义类的功能，可以弥补java中单继承的缺点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pencil</span> </span>&#123;</div><div class="line">String name;</div><div class="line">Pencil() &#123;</div><div class="line">&#125;</div><div class="line">Pencil(String name) &#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"写字"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Eraser</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String color = <span class="string">"白色"</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1：带橡皮的铅笔类继承铅笔类实现橡皮接口</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PencilWithEraser</span> <span class="keyword">extends</span> <span class="title">Pencil</span> <span class="keyword">implements</span> <span class="title">Eraser</span> </span>&#123;</div><div class="line">PencilWithEraser() &#123;</div><div class="line">&#125;</div><div class="line">PencilWithEraser(String name) &#123;</div><div class="line"><span class="keyword">super</span>(name);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(name + <span class="string">":考试专用"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="keyword">super</span>.name + <span class="string">":带橡皮的铅笔，就是好用"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">PencilWithEraser pe = <span class="keyword">new</span> PencilWithEraser(<span class="string">"中华2B"</span>);</div><div class="line">pe.write();</div><div class="line">pe.clean();</div><div class="line">System.out.println(pe.color);</div><div class="line">System.out.println(PencilWithEraser.color);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>格式</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="class"><span class="keyword">interface</span> <span class="title">Inter</span></span></div><div class="line">&gt; &#123;</div><div class="line">&gt; <span class="keyword">int</span> num = <span class="number">6</span>;  <span class="comment">//可以定义属性与方法。</span></div><div class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>注意：可以通过javap命令查看.</p><ol><li><p>接口中的所有属性 默认的修饰符是  public static final。</p></li><li><p>接口中的所有方法 默认的修饰符是  public abstract。</p></li></ol><p>疑惑：干嘛不在PencilWithEraser添加remove功能函数，而要通过接口？</p></blockquote><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml\wpsF0C5.tmp.jpg" alt="img"></p><h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><blockquote><ol><li><p>类实现接口可以通过implements实现，实现接口的时候必须把接口中的所有方法实现,一个类可以实现多个接口。</p></li><li><p>接口中定义的所有的属性默认是public static final的，即静态常量既然是常量，那么定义的时候必须赋值。</p></li><li><p>接口中定义的方法不能有方法体。接口中定义的方法默认添加public abstract</p></li><li><p>有抽象函数的不一定是抽象类，也可以是接口类。</p></li><li><p>由于接口中的方法默认都是抽象的，所以不能被实例化。</p></li><li><p>对于接口而言，可以使用子类来实现接口中未被实现的功能函数。</p></li><li><p>如果实现类中要访问接口中的成员，不能使用super关键字。因为两者之间没有显示的继承关系，况且接口中的成员成员属性是静态的。可以使用接口名直接访问。</p></li><li><p>接口没有构造方法。</p></li></ol></blockquote><h3 id="接口与类、接口之间的关系"><a href="#接口与类、接口之间的关系" class="headerlink" title="接口与类、接口之间的关系"></a>接口与类、接口之间的关系</h3><p>1、接口与类之间是实现关系。</p><blockquote><p>大家之前都知道类与类之间的关系继承，那么接口与类之间又是怎样子的关系呢？<strong>接口与类之间是实现关系</strong>。非抽象类实现接口时，必须把接口里面的所有方法实现。类实现接口用关键字implments，类与接口之间是可以多实现的(即一个类可以实现多个接口)。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Eraser</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String color = <span class="string">"白色"</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pencil</span> <span class="keyword">implements</span> <span class="title">Eraser</span> </span>&#123;</div><div class="line">String name;</div><div class="line">Pencil() &#123;</div><div class="line">&#125;</div><div class="line">Pencil(String name) &#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"写字"</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"涂改..."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分析：</p><p>​    原本铅笔没有涂改功能的，但是一旦实现了Eraser接口做了实现，那么就具备了涂改功能，那么接口的作用则是拓展功能。</p><ol><li>接口与接口之间的关系式继承。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接口与接口之间的关系是继承，接口可以多继承接口.</p><p><strong>练习：</strong>在现实生活中有部分同学在学校期间只会学习，但是有部分学生除了学习外还会赚钱。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><blockquote><p>1：什么是多态</p><p>​        一个对象的多种状态</p><p>​        （老师）（员工）（儿子）</p><p>​        教师 a =老钟;</p><p>​        员工 b= 老钟;</p><p>​    2：多态体现</p><p>​        1：Father类</p><p>​            1：非静态成员变量x</p><p>​            2：静态成员变量y</p><p>​            3：非静态方法eat,方法体输出父类信息</p><p>​            4：静态方法speak();方法体输出父类信息    </p><p>​        2：Son类</p><p>​            1：非静态成员变量x</p><p>​            2：静态成员变量y</p><p>​            3：非静态方法eat，方法体输出子类信息</p><p>​            4：静态方法speak();方法体输出子类信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"开吃"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"小头爸爸"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">4</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"大头儿子很能吃"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"大头儿子。"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo10</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Father f = <span class="keyword">new</span> Son(); <span class="comment">// 父类引用指向了子类对象。</span></div><div class="line">System.out.println(f.x); <span class="comment">// 1</span></div><div class="line">System.out.println(f.y); <span class="comment">// 2</span></div><div class="line">f.eat(); <span class="comment">// 输出的是子类的。</span></div><div class="line">f.speak(); <span class="comment">// 输出的是父类</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>3：Son类继承父类</p><p>​            1：创建Father f=new Son(); </p><p>​                1：这就是父类引用指向了子类对象。</p><p>​                2：问f.x=?（非静态）</p><p>​                3：问f.y=?（静态）</p><p>​                4：问f.eat()输出的是子类还是父类信息？（非静态）</p><p>​                5：问f.speak()输出的是子类还是父类信息？（静态）</p><p>​        4：总结</p><p>1：当父类和子类具有相同的非静态成员变量，那么在多态下访问的是父类的成员变量</p><p>2：当父类和子类具有相同的静态成员变量，那么在多态下访问的是父类的静态成员变量</p><p>​            所以：父类和子类有相同的成员变量，多态下访问的是父类的成员变量。</p><p>3：当父类和子类具有相同的非静态方法（就是子类重写父类方法），多态下访问的是子类的成员方法。</p><p>4：当父类和子类具有相同的静态方法（就是子类重写父类静态方法），多态下访问的是父类的静态方法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    本篇主要介绍了抽象类、&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://shangrila-kun.github.io/categories/java/"/>
    
    
      <category term="面向对象设计" scheme="https://shangrila-kun.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>20171202mysql的那些些坑</title>
    <link href="https://shangrila-kun.github.io/2017/12/02/20171202mysql%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%9B%E5%9D%91/"/>
    <id>https://shangrila-kun.github.io/2017/12/02/20171202mysql的那些些坑/</id>
    <published>2017-12-02T03:37:56.000Z</published>
    <updated>2017-12-02T03:37:56.907Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nginx的哪些坑</title>
    <link href="https://shangrila-kun.github.io/2017/12/02/20171202nginx%E7%9A%84%E5%93%AA%E4%BA%9B%E5%9D%91/"/>
    <id>https://shangrila-kun.github.io/2017/12/02/20171202nginx的哪些坑/</id>
    <published>2017-12-02T02:34:55.000Z</published>
    <updated>2017-12-03T03:57:25.194Z</updated>
    
    <content type="html"><![CDATA[<p>​    本文主要内容记载我在学习nginx中遇到的各种问题。</p><a id="more"></a><h2 id="wordpress更改默认端口的方法"><a href="#wordpress更改默认端口的方法" class="headerlink" title="wordpress更改默认端口的方法"></a>wordpress更改默认端口的方法</h2><blockquote><p>通过nginx转发到wordpress博客时，我们不想把80端口给wordpress时，我们需要通过nginx监听到80端口，然后准发到指定的wordpress的端口，wordpress默认端口是80端口。</p></blockquote><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><p>也可以先使用更改前的端口80访问wordpress，在控制板的设置里面，找到wordpress地址（url），改为端口号，站点地址也该为端口号。</p><p>如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/7882280-286bef55b46d19db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="123.png"></p></blockquote><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>那就直接修改数据库中表wp_options，</p><ol><li><strong>update</strong> wp_options <strong>set</strong> option_value=’<a href="http://IP:18070" target="_blank" rel="noopener">http://IP:18070</a>‘ <strong>where</strong> option_name=’siteurl’;  </li><li><strong>update</strong> wp_options <strong>set</strong> option_value=’<a href="http://IP:18070" target="_blank" rel="noopener">http://IP:18070</a>‘ <strong>where</strong> option_name=’home’;  </li></ol></blockquote><h3 id="nginx转发代码"><a href="#nginx转发代码" class="headerlink" title="nginx转发代码"></a>nginx转发代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">  2     listen 80;</div><div class="line">  3     server_name www.abc.com;</div><div class="line">  4     location /&#123;</div><div class="line">  5             proxy_pass http://127.0.0.1:18070;//此处的端口就是在wordpress后台或者mysql表结构里面改的端口，通过nginx代理到该端口号上去。</div><div class="line">  6     &#125;</div><div class="line">  7 &#125;</div><div class="line">  8 </div><div class="line">  9 server&#123;</div><div class="line"> 10     listen 18070;</div><div class="line"> 11     location ~ ^/.*\.php$ &#123;</div><div class="line"> 12         root /usr/local/web/wlsdata;//静态页面的地址。</div><div class="line"> 13         fastcgi_pass   127.0.0.1:9000;</div><div class="line"> 14         fastcgi_index  index.php;</div><div class="line"> 15         fastcgi_param  SCRIPT_FILENAME  /usr/local/web/wlsdata$fastcgi_script_name;</div><div class="line"> 16         include        fastcgi_params;</div><div class="line"> 17          gzip on;</div><div class="line"> 18     gzip_min_length 1100;</div><div class="line"> 19     gzip_buffers 4 8k;</div><div class="line"> 20     gzip_types text/plain application/x-javascript text/css image;</div><div class="line"> 21     &#125;</div><div class="line"> 22     location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ &#123;</div><div class="line"> 23             expires 30d;</div><div class="line"> 24             root /usr/local/web/wlsdata;</div><div class="line"> 25         &#125;</div><div class="line"> 26      location / &#123;</div><div class="line"> 27             root   /usr/local/web/wlsdata;//静态页面的地址。</div><div class="line"> 28             index  index.php ;</div><div class="line"> 29      &#125;</div><div class="line"> 30 &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    本文主要内容记载我在学习nginx中遇到的各种问题。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://shangrila-kun.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="nginx" scheme="https://shangrila-kun.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>lnmp安装</title>
    <link href="https://shangrila-kun.github.io/2017/12/02/20171202lnmp%E5%AE%89%E8%A3%85/"/>
    <id>https://shangrila-kun.github.io/2017/12/02/20171202lnmp安装/</id>
    <published>2017-12-02T02:09:14.000Z</published>
    <updated>2017-12-02T03:14:23.514Z</updated>
    
    <content type="html"><![CDATA[<p>​    由于项目需要lnmp，linux、nginx 、mysql、php环境，每次一个个源码安装或者yum安装都稀里糊涂的安装好了，有时候还出现莫名奇怪的问题，于是在网上查找了，使用了军哥的脚本部署lnmp。<a href="https://lnmp.org/install.html" target="_blank" rel="noopener">lnmg一键安装官网及问题解答</a></p><a id="more"></a><h2 id="LNMP一键安装包介绍"><a href="#LNMP一键安装包介绍" class="headerlink" title="LNMP一键安装包介绍"></a>LNMP一键安装包介绍</h2><h3 id="LNMP一键安装包是什么"><a href="#LNMP一键安装包是什么" class="headerlink" title="LNMP一键安装包是什么?"></a><strong>LNMP一键安装包是什么?</strong></h3><blockquote><p>LNMP一键安装包是一个用Linux Shell编写的可以为CentOS/RHEL/Fedora/Aliyun/Amazon、Debian/Ubuntu/Raspbian/DeepinServer/Mint Linux VPS或独立主机安装LNMP(Nginx/MySQL/PHP)、LNMPA(Nginx/MySQL/PHP/Apache)、LAMP(Apache/MySQL/PHP)生产环境的Shell程序。</p></blockquote><h3 id="我们为什么需要它"><a href="#我们为什么需要它" class="headerlink" title="我们为什么需要它?"></a><strong>我们为什么需要它?</strong></h3><blockquote><p>编译安装需要输入大量的命令，如果是配置生产环境需要耗费大量的时间。<br>不会Linux的站长或Linux新手想使用Linux作为生产环境……</p></blockquote><h3 id="它有什么优势和功能"><a href="#它有什么优势和功能" class="headerlink" title="它有什么优势和功能?"></a><strong>它有什么优势和功能?</strong></h3><blockquote><p>无需一个一个的输入命令，无需值守，编译安装优化编译参数，提高性能，解决不必要的软件间依赖，特别针对配置自动优化。</p><p>支持自定义Nginx、PHP编译参数及网站和数据库目录、支持生成LetseEcrypt证书、LNMP模式支持多PHP版本、支持单独安装Nginx/MySQL/MariaDB/Pureftpd服务器，同时提供一些实用的辅助工具如：虚拟主机管理、FTP用户管理、Nginx、MySQL/MariaDB、PHP的升级、常用缓存组件Redis/Xcache等的安装、重置MySQL root密码、502自动重启、日志切割、SSH防护DenyHosts/Fail2Ban、备份等许多实用脚本。</p></blockquote><h3 id="如何获取它"><a href="#如何获取它" class="headerlink" title="如何获取它?"></a><strong>如何获取它?</strong></h3><blockquote><p>你可以自由 <a href="https://lnmp.org/download.html" target="_blank" rel="noopener">下载</a> 并使用它在VPS或独立服务器上，做为真正的生产环境或测试环境。</p></blockquote><h3 id="我们为什么采用LNMP这种架构"><a href="#我们为什么采用LNMP这种架构" class="headerlink" title="我们为什么采用LNMP这种架构?"></a><strong>我们为什么采用LNMP这种架构?</strong></h3><blockquote><p>采用Linux、PHP、MySQL的优点我们不必多说。</p><p>Nginx是一个小巧而高效的Linux下的Web服务器软件，是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，已经在一些俄罗斯的大型网站上运行多年，目前很多国内外的门户网站、行业网站也都在是使用Nginx，相当的稳定。</p><p>Nginx相当的稳定、功能丰富、安装配置简单、低系统资源<a href="https://lnmp.org/nginx.html" target="_blank" rel="noopener">…</a></p></blockquote><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><h3 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h3><blockquote><ul><li>CentOS/RHEL/Fedora/Debian/Ubuntu/Raspbian/Deepin Server/Aliyun/Amazon/Mint Linux发行版</li><li>需要5GB以上硬盘剩余空间，MySQL 5.7,MariaDB 10至少9GB剩余空间</li><li>需要128MB以上内存(如果为128MB的小内存VPS,Xen的需要有SWAP,OpenVZ的至少要有128MB以上的vSWAP或突发内存)，注意小内存请勿使用64位系统！</li><li><strong>安装MySQL 5.6或5.7及MariaDB 10必须1G以上内存!</strong>。</li><li>VPS或服务器必须已经联网，且必须设置的是网络源不能是光盘源，同时VPS/服务器 DNS要正常！</li><li>Linux下区分大小写，输入命令时请注意！</li><li>CentOS 5,Debian 6及之前版本其官网已经结束支持无法使用！</li></ul><p>LNMP一键安装包 V1.4 已经在<a href="https://www.vpser.net/go/vultr" target="_blank" rel="noopener">Vultr</a>、<a href="https://www.vpser.net/go/aoyohost" target="_blank" rel="noopener">遨游主机</a>、<a href="https://www.vpser.net/go/bandwagonhost" target="_blank" rel="noopener">搬瓦工</a>、<a href="https://www.vpser.net/go/photonvps" target="_blank" rel="noopener">PhotonVPS</a>、<a href="https://www.vpser.net/go/oneasiahost" target="_blank" rel="noopener">OneAsiahost新加坡VPS</a>、<a href="https://www.vpser.net/go/budgetvm" target="_blank" rel="noopener">BudgetVM</a>、<a href="https://www.vpser.net/go/digitalocean" target="_blank" rel="noopener">DigitalOcean</a>、<a href="https://www.vpser.net/go/locvps" target="_blank" rel="noopener">LocVPS</a>、<a href="https://www.vpser.net/go/linode" target="_blank" rel="noopener">Linode</a>、<a href="https://www.vpser.net/go/diahosting" target="_blank" rel="noopener">DiaHosting</a>、<a href="https://www.vpser.net/go/kvmla" target="_blank" rel="noopener">KVMLA</a>、<a href="https://www.vpser.net/go/jwdns" target="_blank" rel="noopener">景文互联</a>、<a href="https://www.vpser.net/go/ramnode" target="_blank" rel="noopener">RamNode</a>、<a href="https://www.vpser.net/go/buyvm" target="_blank" rel="noopener">BuyVM</a>、<a href="https://www.vpser.net/go/80vps" target="_blank" rel="noopener">80VPS</a>、<a href="https://www.vpser.net/go/kiiyi" target="_blank" rel="noopener">快易互联</a>、<a href="https://www.vpser.net/go/aliyun" target="_blank" rel="noopener">阿里云</a>等众多VPS的CentOS 6-7、RHEL 6-7、Fedora 21-23、Debian 7-9、Ubuntu 10.04-17.04的32位和64位系统上测试通过(CentOS 5,Debian 6及之前版本其官网已经结束支持无法使用,Debian9上Apache需选2.4.26版本以上，<strong>深度/deepin只能使用服务器版,桌面版勿用！！</strong>)。</p></blockquote><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><blockquote><p><strong>1、使用putty或类似的SSH工具登陆VPS或服务器；</strong></p><p>登陆后运行：<strong>screen -S lnmp</strong></p><p>如果提示screen: command not found 命令不存在可以执行：yum install screen 或 apt-get install screen安装，详细内容参考<a href="https://www.vpser.net/manage/run-screen-lnmp.html" target="_blank" rel="noopener">screen教程</a>。</p><p><strong>2、下载并安装LNMP一键安装包：</strong></p><p>您可以选择使用下载版(推荐美国及海外VPS或空间较小用户使用)或者完整版(推荐国内VPS使用，国内用户可用在<a href="https://lnmp.org/download.html" target="_blank" rel="noopener">下载</a>中找国内下载地址替换)，两者没什么区别，只是完整版把一些需要的源码文件预先放到安装包里。<strong>深度/deepin只能使用服务器版，桌面版请勿安装！！</strong></p><p>安装LNMP稳定版<br><strong>wget -c <a href="http://soft.vpser.net/lnmp/lnmp1.4.tar.gz" target="_blank" rel="noopener">http://soft.vpser.net/lnmp/lnmp1.4.tar.gz</a> &amp;&amp; tar zxf lnmp1.4.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; ./install.sh lnmp</strong></p><p>默认安装lnmp可不写，如需要安装LNMPA或LAMP，将./install.sh 后面的参数替换为lnmpa或lamp即可。如需更改网站和数据库目录先修改安装包目录下的 lnmp.conf 文件。</p><p>如下载速度慢请更换其他下载节点，详情请看<a href="https://lnmp.org/download.html" target="_blank" rel="noopener">下载页面</a>。<a href="https://lnmp.org/faq/lnmp-download-source.html" target="_blank" rel="noopener">LNMP下载节点具体替换方法</a>。</p><p>运行上述LNMP安装命令后，会出现如下提示：<br><img src="https://lnmp.org/images/1.4/lnmp1.4-install-1.png" alt="img"><br>目前提供了较多的MySQL、MariaDB版本和不安装数据库的选项，需要<strong>注意的是MySQL 5.6,5.7及MariaDB 10必须在1G以上内存的更高配置上才能选择</strong>！</p><p>输入对应MySQL或MariaDB版本前面的序号，回车进入下一步.</p><p><img src="https://lnmp.org/images/1.4/lnmp1.4-install-2.png" alt="img"><br>需要设置MySQL的root密码（不输入直接回车将会设置为root）如果输入有错误需要删除时，可以按住Ctrl再按Backspace键进行删除(个别情况下是只需要Backspace键)。输入后回车进入下一步，如下图所示：<br><img src="https://lnmp.org/images/1.4/lnmp1.4-install-3.png" alt="img"><br>询问是否需要启用MySQL InnoDB，InnoDB引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n，输入完成，回车进入下一步。</p><p>注意：选择PHP7等高版本时需要自行确认是否与自己的程序兼容。<br><img src="https://lnmp.org/images/1.4/lnmp1.4-install-4.png" alt="img"><br>输入要选择的PHP版本的序号，回车进入下一步，选择是否安装内存优化：<br><img src="https://lnmp.org/images/1.4/lnmp1.4-install-5.png" alt="img"><br>可以选择不安装、Jemalloc或TCmalloc，输入对应序号回车，直接回车为默认为不安装。</p><p>如果是LNMPA或LAMP的话还会提示<img src="https://lnmp.org/images/1.4/lnmp1.4-install-6.png" alt="img">“Please enter Administrator Email Address:”，需要设置管理员邮箱，该邮箱会在报错时显示在错误页面上。</p><p>再选择Apache版本<br><img src="https://lnmp.org/images/1.4/lnmp1.4-install-7.png" alt="img"><br>按提示输入对应版本前面的数字序号，回车。</p><p>提示”Press any key to install…or Press Ctrl+c to cancel”后，按回车键确认开始安装。<br>LNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin、Zend Optimizer这几个软件。</p><p>安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响。</p></blockquote><h2 id="安装完成效果"><a href="#安装完成效果" class="headerlink" title="安装完成效果"></a>安装完成效果</h2><blockquote><p>如果显示Nginx: OK，MySQL: OK，PHP: OK<br><img src="https://lnmp.org/images/1.4/lnmp1.4-install-success.png" alt="img"><br>并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示安装使用的时间及Install lnmp V1.4 completed! enjoy it.的话，说明已经安装成功。</p><p>安装完成接下来开始使用就可以了，按<a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html" target="_blank" rel="noopener"><strong>添加虚拟主机教程</strong></a>，添加虚拟主机后可以使用<a href="https://lnmp.org/faq/sftp.html" target="_blank" rel="noopener">sftp</a>或<a href="https://lnmp.org/faq/ftpserver.html" target="_blank" rel="noopener">ftp服务器</a>上传网站代码，将域名解析到VPS或服务器的IP上，解析生效即可使用。</p></blockquote><h2 id="安装失败效果"><a href="#安装失败效果" class="headerlink" title="安装失败效果"></a>安装失败效果</h2><blockquote><p><img src="https://lnmp.org/images/1.4/lnmp1.4-install-failed.png" alt="img"><br>如果出现类似上图的提示，有一个没安装成功表明安装失败！！需要用<a href="http://www.vpser.net/manage/winscp.html" target="_blank" rel="noopener">winscp</a>或其他类似工具，将/root目录下面的lnmp-install.log下载下来，到<a href="http://bbs.vpser.net/forum-25-1.html" target="_blank" rel="noopener">LNMP支持论坛</a>发帖注明你的系统发行版名称及版本号、32位还是64位等信息，并将lnmp-install.log压缩以附件形式上传到论坛，我们会通过日志查找错误，并给予相应的解决方法。</p><p>默认LNMP是不安装FTP服务器的，如需要FTP服务器：<a href="https://lnmp.org/faq/ftpserver.html" target="_blank" rel="noopener">https://lnmp.org/faq/ftpserver.html</a></p><p>5、添加、删除虚拟主机及伪静态管理</p><p><a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html" target="_blank" rel="noopener">https://lnmp.org/faq/lnmp-vhost-add-howto.html</a></p><p>6、eAccelerator、xcache、memcached、imageMagick、ionCube、redis、opcache的安装</p><p><a href="https://lnmp.org/faq/addons.html" target="_blank" rel="noopener">https://lnmp.org/faq/addons.html</a></p><p>7、LNMP相关软件目录及文件位置</p><p><a href="https://lnmp.org/faq/lnmp-software-list.html" target="_blank" rel="noopener">https://lnmp.org/faq/lnmp-software-list.html</a></p><p>8、LNMP状态管理命令</p><p><a href="https://lnmp.org/faq/lnmp-status-manager.html" target="_blank" rel="noopener">https://lnmp.org/faq/lnmp-status-manager.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    由于项目需要lnmp，linux、nginx 、mysql、php环境，每次一个个源码安装或者yum安装都稀里糊涂的安装好了，有时候还出现莫名奇怪的问题，于是在网上查找了，使用了军哥的脚本部署lnmp。&lt;a href=&quot;https://lnmp.org/install.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lnmg一键安装官网及问题解答&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件安装" scheme="https://shangrila-kun.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="linux" scheme="https://shangrila-kun.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>用阿里云免费ssl证书把网站从http变成https</title>
    <link href="https://shangrila-kun.github.io/2017/11/18/%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6%E6%8A%8A%E7%BD%91%E7%AB%99%E4%BB%8Ehttp%E5%8F%98%E6%88%90https/"/>
    <id>https://shangrila-kun.github.io/2017/11/18/用阿里云免费ssl证书把网站从http变成https/</id>
    <published>2017-11-18T12:32:00.000Z</published>
    <updated>2017-11-19T09:45:52.402Z</updated>
    
    <content type="html"><![CDATA[<p>​    实验室小程序需要调用到全程版接口，但是全程版接口都是http形式，需要http转https，整理了这篇文章，解决这个问题。</p><p>​<a id="more"></a></p><h3 id="1、登录阿里云后台找到产品与服务、找到证书"><a href="#1、登录阿里云后台找到产品与服务、找到证书" class="headerlink" title="1、登录阿里云后台找到产品与服务、找到证书"></a>1、登录阿里云后台找到产品与服务、找到证书</h3><p><a href="http://jingyan.baidu.com/album/9f7e7ec09c80976f281554f1.html?picindex=1" target="_blank" rel="noopener"><img src="https://imgsa.baidu.com/exp/w=500/sign=ccb7fe399813b07ebdbd50083cd79113/77c6a7efce1b9d16cabfe379f8deb48f8c5464a9.jpg" alt="用阿里云免费ssl证书把网站从http变成https">步骤阅读</a></p><h3 id="2、免费购买完成后，在订单里不去信息，输入需要使用Https服务的详细子域名，填写个人信息"><a href="#2、免费购买完成后，在订单里不去信息，输入需要使用Https服务的详细子域名，填写个人信息" class="headerlink" title="2、免费购买完成后，在订单里不去信息，输入需要使用Https服务的详细子域名，填写个人信息"></a>2、免费购买完成后，在订单里不去信息，输入需要使用Https服务的详细子域名，填写个人信息</h3><p><img src="http://images2015.cnblogs.com/blog/601899/201703/601899-20170331115509555-875540633.png" alt="img"></p><h3 id="3、完成信息后，接下来就是等待审批结果了，审批通过后，下载，"><a href="#3、完成信息后，接下来就是等待审批结果了，审批通过后，下载，" class="headerlink" title="3、完成信息后，接下来就是等待审批结果了，审批通过后，下载，"></a>3、完成信息后，接下来就是等待审批结果了，审批通过后，下载，</h3><p><img src="http://images2015.cnblogs.com/blog/601899/201703/601899-20170331115606945-2078304494.png" alt="img"></p><p>据自己服务器的实际情况 ，选择相应类型，完成安装，我的是nginx。</p><h3 id="4、将下载的两个文件安装到nginx"><a href="#4、将下载的两个文件安装到nginx" class="headerlink" title="4、将下载的两个文件安装到nginx"></a>4、将下载的两个文件安装到nginx</h3><p>​    建议安装最新的nginx，nginx依赖</p><p>​    nginx依赖以下模块：l  gzip模块需要 zlib 库l  rewrite模块需要 pcre 库l  ssl 功能需要openssl库</p><h4 id="4-1-安装pcre"><a href="#4-1-安装pcre" class="headerlink" title="4.1.安装pcre"></a>4.1.安装pcre</h4><ol><li>获取pcre编译安装包，在<a href="http://www.pcre.org/" target="_blank" rel="noopener">http://www.pcre.org/</a>上可以获取当前最新的版本</li><li>解压缩pcre-xx.tar.gz包。</li><li>进入解压缩目录，执行./configure。</li><li>make &amp; make install</li></ol><h4 id="4-2-安装openssl"><a href="#4-2-安装openssl" class="headerlink" title="4.2.安装openssl"></a>4.2.安装openssl</h4><ol><li>获取openssl编译安装包，在<a href="http://www.openssl.org/source/" target="_blank" rel="noopener">http://www.openssl.org/source/</a>上可以获取当前最新的版本。</li><li>解压缩openssl-xx.tar.gz包。</li><li>进入解压缩目录，执行./config。</li><li>make &amp; make install</li></ol><h4 id="4-3-安装zlib"><a href="#4-3-安装zlib" class="headerlink" title="4.3.安装zlib"></a>4.3.安装zlib</h4><ol><li>获取zlib编译安装包，在<a href="http://www.zlib.net/" target="_blank" rel="noopener">http://www.zlib.net/</a>上可以获取当前最新的版本。</li></ol><ol><li><p>解压缩openssl-xx.tar.gz包。</p></li><li><p>进入解压缩目录，执行./configure。</p></li><li><p>make &amp; make install </p><h4 id="4-4安装nginx"><a href="#4-4安装nginx" class="headerlink" title="4.4安装nginx"></a>4.4安装nginx</h4><p>  1.获取nginx，在<a href="http://nginx.org/en/download.html上可以获取当前最新的版本。" target="_blank" rel="noopener">http://nginx.org/en/download.html上可以获取当前最新的版本。</a></p><p>  2.解压缩nginx-xx.tar.gz包。</p><ol><li>进入解压缩目录，执行./configure</li><li>make &amp; make install</li></ol><p>若安装时找不到上述依赖模块，使用–with-openssl=<openssl_dir>、–with-pcre=<pcre_dir>、–with-zlib=<zlib_dir>指定依赖的模块目录。如已安装过，此处的路径为安装目录；若未安装，则此路径为编译安装包路径，nginx将执行模块的默认编译安装。</zlib_dir></pcre_dir></openssl_dir></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    实验室小程序需要调用到全程版接口，但是全程版接口都是http形式，需要http转https，整理了这篇文章，解决这个问题。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="database" scheme="https://shangrila-kun.github.io/categories/database/"/>
    
    
      <category term="sql" scheme="https://shangrila-kun.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>数据库知识点总结（未完待续）</title>
    <link href="https://shangrila-kun.github.io/2017/11/18/20171118database/"/>
    <id>https://shangrila-kun.github.io/2017/11/18/20171118database/</id>
    <published>2017-11-18T12:32:00.000Z</published>
    <updated>2018-01-06T12:18:02.363Z</updated>
    
    <content type="html"><![CDATA[<p>​    本文内容记载在我在学习数据库这门课程中的知识点，内容涵盖对sql关键字的讲解，sql语句的具体案例及分析。</p><a id="more"></a><h2 id="SQL中的关键字讲解"><a href="#SQL中的关键字讲解" class="headerlink" title="SQL中的关键字讲解"></a>SQL中的关键字讲解</h2><h3 id="distinct用法"><a href="#distinct用法" class="headerlink" title="distinct用法"></a>distinct用法</h3><blockquote><p>作用于单列</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; select distinct name from A</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>作用于多列</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; select distinct name, id from A //实际上是根据name和id两个字段来去重的，这种方式Access和SQL Server同时支持。</div><div class="line">&gt;</div></pre></td></tr></table></figure><p>COUNT统计</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; select count(distinct name) from A;  --表中name去重后的数目， SQL Server支持，而Access不支持</div><div class="line">&gt; count是不能统计多个字段的，下面的SQL在SQL Server和Access中都无法运行。</div><div class="line">&gt; select count(distinct name, id) from A;</div><div class="line">&gt; 若想使用，请使用嵌套查询，如下：</div><div class="line">&gt; select count(*) from (select distinct xing, name from B) AS M;</div><div class="line">&gt;</div></pre></td></tr></table></figure><p>distinct必须放在开头</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; select id, distinct name from A;   --会提示错误，因为distinct必须放在开头</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><h3 id="Union-amp-amp-Union-ALL的用法"><a href="#Union-amp-amp-Union-ALL的用法" class="headerlink" title="Union&amp;&amp;Union ALL的用法"></a>Union&amp;&amp;Union ALL的用法</h3><blockquote><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><p>请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</p><p><strong>Union因为要进行重复值扫描，所以效率低。如果合并没有刻意要删除重复行，那么就使用Union All</strong></p><p><strong>两个要联合的SQL语句 字段个数必须一样，而且字段类型要“相容”（一致）</strong>  </p><p>如果我们需要将两个select语句的结果作为一个整体显示出来，我们就需要用到union或者union all关键字。union(或称为联合)的作用是将多个结果合并在一起显示出来。 </p><p>union和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。 </p><p>Union：对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序； </p><p>Union All：对两个结果集进行并集操作，包括重复行，不进行排序； </p><p>Intersect：对两个结果集进行交集操作，不包括重复行，同时进行默认规则的排序； </p><p>Minus：对两个结果集进行差操作，不包括重复行，同时进行默认规则的排序。 </p><p>可以在最后一个结果集中指定Order by子句改变排序方式。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; select * from emp where deptno &gt;= 20 </div><div class="line">&gt; union all </div><div class="line">&gt; select * from emp where deptno &lt;= 30 </div><div class="line">&gt; select empno,ename from emp </div><div class="line">&gt; union </div><div class="line">&gt; select deptno,dname from dept </div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><h2 id="案例表结构"><a href="#案例表结构" class="headerlink" title="案例表结构"></a>案例表结构</h2><h3 id="c、o、p、a表结构"><a href="#c、o、p、a表结构" class="headerlink" title="c、o、p、a表结构"></a>c、o、p、a表结构</h3><blockquote><p>表结构如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; CREATE TABLE  customers (//顾客表</div><div class="line">&gt; cid CHAR(4) NOT NULL,</div><div class="line">&gt; cname VARCHAR(13),</div><div class="line">&gt; city VARCHAR(20),</div><div class="line">&gt; discnt REAL,</div><div class="line">&gt; PRIMARY KEY(cid) );</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; CREATE TABLE agents (//代理商表</div><div class="line">&gt; aid CHAR(3) NOT NULL,</div><div class="line">&gt; aname VARCHAR(13),</div><div class="line">&gt; city VARCHAR(20),</div><div class="line">&gt; percent SMALLINT,</div><div class="line">&gt; PRIMARY KEY (aid) );</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; CREATE TABLE  products (//产品表</div><div class="line">&gt; pid CHAR(3) NOT NULL,</div><div class="line">&gt; pname VARCHAR(13),</div><div class="line">&gt; city VARCHAR(20),</div><div class="line">&gt; quantity INTEGER,</div><div class="line">&gt; price DOUBLE PRECISION,</div><div class="line">&gt; PRIMARY KEY(pid) );</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; CREATE TABLE  orders (//订单表</div><div class="line">&gt; ordno INTEGER NOT NULL,</div><div class="line">&gt; month CHAR(3),</div><div class="line">&gt; cid CHAR(4),</div><div class="line">&gt; aid CHAR(3),</div><div class="line">&gt; pid CHAR(3),</div><div class="line">&gt; qty INTEGER,</div><div class="line">&gt; dollars DOUBLE PRECISION,</div><div class="line">&gt; PRIMARY KEY(ordno) );</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote></blockquote><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; query in relational algebra (Theta-Join)</div><div class="line">&gt; ( R where Condition ) [ A1, A2, ..., Am ]</div><div class="line">&gt; SELECT  A1, A2, ..., Am</div><div class="line">&gt; FROM      R</div><div class="line">&gt; WHERE   Condition ;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; query in relational algebra (PRODUCT)</div><div class="line">&gt; ((R1R2...Rn) where Condition) [A1,A2,...,Am]</div><div class="line">&gt; query in SQL</div><div class="line">&gt; SELECT  A1, A2, ..., Am</div><div class="line">&gt; FROM      R1, R2, …, Rn</div><div class="line">&gt; WHERE   Condition ;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; query in relational algebra (Theta-Join)</div><div class="line">&gt; ( R Condition S ) [ A1, A2, ..., Am ]</div><div class="line">&gt; query in SQL</div><div class="line">&gt; SELECT  A1, A2, ..., Am</div><div class="line">&gt; FROM      R, S</div><div class="line">&gt; WHERE   Condition ;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; Exp 4.3.1 Find aid and names of agents that are based in New York.</div><div class="line">&gt; Relational Algebra</div><div class="line">&gt; (AGENTS where city=‘New York’) [ aid, aname ]</div><div class="line">&gt; SQL</div><div class="line">&gt; SELECT  aid, aname</div><div class="line">&gt; FROM      agents</div><div class="line">&gt; WHERE   city = 'New York’ ;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; Exp 4.3.2 Display all values of customers in table CUSTOMERS.</div><div class="line">&gt; Relational Algebra</div><div class="line">&gt; CUSTOMERS  [ cid, cname, city, discnt ]</div><div class="line">&gt;</div></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; Exp 4.3.4 Retrieve all (cname, aname) pairs where the customer places an order through the agent.</div><div class="line">&gt; Relational Algebra</div><div class="line">&gt; ( C[cid, cname] oo O ) oo A ) [ cname, aname ]//join 连接</div><div class="line">&gt; ((C x O x A) where C.cid=O.cid and O.aid=A.aid) [ C.cname, A.aname ]//乘积</div><div class="line">&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; Exp 4.5.5: Find cids for customers who order all products ordered by customer c006.</div><div class="line">&gt;       ORDERS [ cid, pid ]  除以 ( ORDERS where cid = ‘c006’ ) [ pid ]</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote></blockquote><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="子查询的定义"><a href="#子查询的定义" class="headerlink" title="子查询的定义"></a>子查询的定义</h3><blockquote><p>定义：子查询本质上是嵌套进其他SELECT,UPDATE,INSERT,DELETE语句的一个被限制的SELECT语句,在子查询中，只有下面几个子句可以使用</p><ol><li>SELECT子句（必须）</li><li>FROM子句(必选）</li><li>WHERE子句(可选)</li><li>GROUP BY(可选)</li><li>HAVING(可选)</li><li>ORDER BY(只有在TOP关键字被使用时才可用)</li></ol><p>子查询也可以嵌套在其他子查询中,这个嵌套最多可达32层。子查询也叫内部查询(Inner query)或者内部选择(Inner Select),而包含子查询的查询语句也叫做外部查询</p></blockquote><h3 id="子查询的谓词"><a href="#子查询的谓词" class="headerlink" title="子查询的谓词"></a>子查询的谓词</h3><blockquote><p>in 谓词（predicate）expr [NOT] IN ( subquery )</p><p>The Quantified Comparison Predicate (量化比较谓词)       expr q SOME|ANY|ALL( subquery )</p><p>The EXISTS Predicate  [NOT] EXISTS ( subquery )</p><p>The BETWEEN Predicate  expr [NOT] BETWEEN expr1 AND expr2</p><p>The IS NULL Predicate column  IS [NOT] NULL</p><p>The LIKE Predicate column [NOT] LIKE val1 [ ESCAPE val2 ]</p><blockquote><p>§underscore ( _ ): any single character</p><p>§percent ( % ): any sequence of zero or morecharacters</p></blockquote></blockquote><h3 id="子查询的执行分析"><a href="#子查询的执行分析" class="headerlink" title="子查询的执行分析"></a>子查询的执行分析</h3><p>​    原文链接：<a href="https://www.cnblogs.com/CareySon/archive/2011/07/18/2109406.html" target="_blank" rel="noopener">点击</a> </p><blockquote><p><strong>子查询的简单描述</strong> ：</p><p> 通常来讲，子查询按照子查询所返回数据的类型，可以分为三种，分别为：</p><ol><li>返回一张数据表(Table)</li><li>返回一列值(Column)</li><li>返回单个值(Scalar)</li></ol></blockquote><h4 id="子查询做数据源的使用"><a href="#子查询做数据源的使用" class="headerlink" title="子查询做数据源的使用"></a>子查询做数据源的使用</h4><blockquote><p>  当子查询在外部查询的<strong>FROM</strong>子句之后使用时,子查询被当作一个<strong>数据源</strong>使用,即使这时子查询只返回一个单一值(Scalar)或是一列值(Column)，在这里依然可以看作一个特殊的<strong>数据源</strong>,即一个二维数据表(Table).作为数据源使用的子查询很像一个<strong>View(视图),</strong>只是这个子查询只是临时存在，并不包含在数据库中。</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;   SELECT     P.ProductID, P.Name, P.ProductNumber, M.Name AS ProductModelName</div><div class="line">&gt;   FROM         Production.Product AS P INNER JOIN</div><div class="line">&gt;   (SELECT     Name, ProductModelID</div><div class="line">&gt;   FROM          Production.ProductModel) AS M </div><div class="line">&gt;   ON P.ProductModelID = M.ProductModelID</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote></blockquote><h4 id="子查询作为选择条件的使用"><a href="#子查询作为选择条件的使用" class="headerlink" title="子查询作为选择条件的使用"></a>子查询作为选择条件的使用</h4><blockquote><p>​     作为选择条件的子查询也是子查询相对最复杂的应用.</p><p>​    作为选择条件的子查询是那些只返回<strong>一列(Column)</strong>的子查询，如果作为选择条件使用，即使只返回<strong>单个值</strong>，也可以看作是只有<strong>一行</strong>的<strong>一列.</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; select   distinct  cid</div><div class="line">&gt; from     orders</div><div class="line">&gt; where   aid  IN  (</div><div class="line">&gt; select  aid         --uncorrelated Subquery:(a05,a06)非相关的子查询，更快</div><div class="line">&gt; from  agents</div><div class="line">&gt; where  city= ‘Duluth’  or  city=‘Dallas’)</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>  但是要强调的是，不要用IN和NOT IN关键字，这会引起很多潜在的问题，这篇文章对这个问题有着很好的阐述:<a href="http://wiki.lessthandot.com/index.php/Subquery_typo_with_using_in" target="_blank" rel="noopener">http://wiki.lessthandot.com/index.php/Subquery_typo_with_using_in</a>。这篇文章的观点是永远不要再用IN和NOT IN关键字，我的观点是存在即合理，我认为只有在IN里面是固定值的时候才可以用IN和NOT IN，比如： IN (25,33)</p><p>只有在上面这种情况下，使用IN和NOT IN关键字才是安全的，其他情况下，最好使用EXISTS,NOT EXISTS,JOIN关键字来进行替代. 除了IN之外，用于选择条件的关键字还有<strong>ANY</strong>和<strong>ALL</strong>,这两个关键字和其字面意思一样. 和”&lt;”,”&gt;”,”=”连接使用</p><p> 在作为ANY和ALL关键字在子查询中使用时，所实现的效果如下</p><table><thead><tr><th>=ANY</th><th>和IN等价</th></tr></thead><tbody><tr><td>&lt;&gt;ALL</td><td>和NOT IN等价</td></tr><tr><td>&gt;ANY</td><td>大于最小的(&gt;MIN)</td></tr><tr><td>&lt;ANY</td><td>小于最大的(&lt;MAX)</td></tr><tr><td>&gt;ALL</td><td>大于最大的(&gt;MAX)</td></tr><tr><td>&lt;ALL</td><td>小于最小的(&lt;MIN)</td></tr><tr><td>=ALL</td><td>下面说</td></tr></tbody></table><p>   =ALL关键字很少使用，这个的效果在子查询中为如果只有一个返回值，则和“=”相等，而如果有多个返回值，结果为空。</p><p>这里要注意，SQL是一种很灵活的语言，就像子查询所实现的效果可以使用JOIN来实现一样（效果一样，实现思路不同），ANY和ALL所实现的效果也完全可以使用其他方式来替代,按照上面表格所示，&gt;ANY和&gt;MIN完全等价，比如下面两个查询语句完全等价</p><p>IN             is    =SOME</p><p>NOT IN    is    &lt;&gt;ALL</p></blockquote><h4 id="相关子查询和EXISTS关键字"><a href="#相关子查询和EXISTS关键字" class="headerlink" title="相关子查询和EXISTS关键字"></a>相关子查询和EXISTS关键字</h4><blockquote><p>前面所说的查询都是<strong>无关子查询(Uncorrelated subquery),</strong>子查询中还有一类很重要的查询是<strong>相关子查询(Correlated subquery),也叫重复子查询</strong>比如，还是上面那个查询，用相关子查询来写:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; SELECT  distinct  cname FROM   customers  c</div><div class="line">&gt; WHERE ‘p05’  IN  ( select pid    --correlated Subquery 相关的子查询</div><div class="line">&gt; from  orders  o</div><div class="line">&gt; where o.cid=c.cid );</div><div class="line">&gt; SELECT [FirstName],[MiddleName],[LastName] FROM [AdventureWorks].[Person].[Contact] c</div><div class="line">&gt; WHERE EXISTS(SELECT *</div><div class="line">&gt;   FROM [AdventureWorks].[HumanResources].[Employee] e</div><div class="line">&gt;   WHERE c.ContactID=e.ContactID AND e.SickLeaveHours&gt;68)</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>如何区别<strong>相关子查询</strong>和<strong>无关子查询</strong>呢?最简单的办法就是直接看子查询本身能否执行。</p><p>上面的<strong>无关子查询</strong>，整个查询过程可以看作是<strong>子查询</strong>首先返回SQLResult(SQL结果集),然后交给<strong>外部查询</strong>使用，整个过程<strong>子查询</strong>只执行一次</p><p>  而相反,作为<strong>相关子查询</strong>,子查询的执行的次数依赖于外部查询，外部查询每执行一行，子查询执行一次。</p><p> 如上面代码所示。上面的相关子查询实际上会执行N次（N取决与外部查询的行数），外部查询每执行一行，都会将对应行所用的参数传到子查询中，如果子查询有对应值，则返回TRUE（既当前行被选中并在结果中显示），如果没有，则返回FALSE。然后重复执行下一行。</p></blockquote><h4 id="子查询作为计算列使用"><a href="#子查询作为计算列使用" class="headerlink" title="子查询作为计算列使用"></a>子查询作为计算列使用</h4><blockquote><p>当<strong>子查询</strong>作为<strong>计算列</strong>使用时，只返回单个值(Scalar) 。用在SELECT语句之后，作为计算列使用。同样分为<strong>相关子查询</strong>和<strong>无关子查询</strong></p><p>​    <strong>相关子查询</strong>的例子比如：我想取得每件产品的名称和总共的销量。</p><p>表t_product    id  ,productName;</p><p>表t_order  id ,orderNo,productId</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; select productName , (select count(*) from t_order o where p.id=o.productId ) as totalNum </div><div class="line">&gt;</div><div class="line">&gt; from t_product p ;//相关的子查询</div><div class="line">&gt;   </div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>当<strong>子查询</strong>作为<strong>计算列</strong>使用时，会针对<strong>外部查询</strong>的每一行，返回唯一的值。</p><p>   同样的，SQL子查询都可以使用其他语句达到同样的效果，上面的语句和如下语句达到同样的效果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; select productName ,count(*) as total from t_product p,t_order o where p.id = o.productId group by productName;</div><div class="line">&gt;</div><div class="line">&gt; select productName ,count(*) as total from t_product p join t_order o on p.id = o.productId group by productName;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>   子查询作为计算列且作为无关子查询时使用，只会一次性返回但一值，这里就不再阐述了。</p></blockquote><h3 id="子查询案例"><a href="#子查询案例" class="headerlink" title="子查询案例"></a>子查询案例</h3><blockquote></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Exp 4.4.1 Retrieve cids of customers who place orders with agents in Duluth or Dallas</div><div class="line"></div><div class="line">SQL 1</div><div class="line"><span class="keyword">select</span>  <span class="keyword">distinct</span>  cid</div><div class="line"><span class="keyword">from</span>    orders  o, agents  a</div><div class="line"><span class="keyword">where</span>  a.aid=o.aid  <span class="keyword">and</span></div><div class="line">    (a.city=‘Duluth’ <span class="keyword">or</span> a.city=‘Dallas’);</div><div class="line">SQL 2 (FAST   Why?)</div><div class="line"><span class="keyword">select</span>   <span class="keyword">distinct</span>  cid</div><div class="line"><span class="keyword">from</span>     orders</div><div class="line"><span class="keyword">where</span>   aid  <span class="keyword">IN</span>  (</div><div class="line"><span class="keyword">select</span>  aid         <span class="comment">--uncorrelated Subquery:(a05,a06)非相关的子查询，更快</span></div><div class="line"><span class="keyword">from</span>  agents</div><div class="line"><span class="keyword">where</span>  city= ‘Duluth’  <span class="keyword">or</span>  city=‘Dallas’)</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Exp 4.4.2 Get all information concerning agents based in Duluth or Dallas.</div><div class="line"><span class="keyword">SELECT</span>  *</div><div class="line"><span class="keyword">FROM</span>  agents</div><div class="line"><span class="keyword">WHERE</span>  city  <span class="keyword">IN</span>  ( ‘Duluth’, ‘Dallas’ ) ;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Exp 4.4.3 Get the names and discounts of all customers who place orders through agents in Duluth or Dallas.</div><div class="line"><span class="keyword">SELECT</span>  cname,  discnt <span class="keyword">FROM</span>      customers</div><div class="line"><span class="keyword">WHERE</span>  cid  <span class="keyword">IN</span>  (</div><div class="line"><span class="keyword">SELECT</span>  o.cid</div><div class="line"><span class="keyword">FROM</span>      orders  o</div><div class="line"><span class="keyword">WHERE</span>  o.aid  <span class="keyword">IN</span>  (</div><div class="line"><span class="keyword">SELECT</span>  a.aid</div><div class="line"><span class="keyword">FROM</span>      agents  a</div><div class="line"><span class="keyword">WHERE</span>  a.city <span class="keyword">IN</span> (‘Duluth’, ‘Dallas’))) ;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Exp 4.4.4 Find the names of customers who order product p05. (<span class="keyword">use</span> uncorrelated Subquery?)相关的子查询</div><div class="line"><span class="keyword">SQL</span>(<span class="number">1</span>)</div><div class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname <span class="keyword">FROM</span>   customers  c,  orders  o <span class="keyword">WHERE</span>  c.cid=o.cid <span class="keyword">and</span> o.pid=‘p05’ ; </div><div class="line"></div><div class="line">SQL(2)</div><div class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname <span class="keyword">FROM</span>   customers  c</div><div class="line"><span class="keyword">WHERE</span> ‘p05’  <span class="keyword">IN</span>  ( <span class="keyword">select</span> pid    <span class="comment">--correlated Subquery 相关的子查询</span></div><div class="line"><span class="keyword">from</span>  orders  o</div><div class="line"><span class="keyword">where</span> o.cid=c.cid );</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Exp 4.4.6 Find ordno values for all orders placed by customers in Duluth through agents in New York.</div><div class="line"><span class="keyword">SELECT</span>  ordno</div><div class="line"><span class="keyword">FROM</span>  orders</div><div class="line"><span class="keyword">WHERE</span>  (cid, aid)  <span class="keyword">IN</span></div><div class="line">(<span class="keyword">select</span>  cid, aid</div><div class="line"> <span class="keyword">from</span>      customers  c,  agents  a</div><div class="line"><span class="keyword">where</span>   c.city=‘Duluth’ <span class="keyword">and</span> a.city=‘<span class="keyword">New</span> York’) ; </div><div class="line">//这是两个表的笛卡儿积，先查询c表符合的条件，再查询a表符合的条件，做笛卡尔的乘积，让子查询作为选择条件。</div><div class="line"><span class="keyword">select</span> p.id,o.id <span class="keyword">from</span> t_product p ,t_order o;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Exp 4.4.7  Find aid values of agents with a minimum percent commission(佣金).</div><div class="line"><span class="keyword">SELECT</span>  aid</div><div class="line"><span class="keyword">FROM</span>  agents</div><div class="line"><span class="keyword">WHERE</span>  <span class="keyword">percent</span> &lt;= ALL (</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">percent</span> </div><div class="line">         <span class="keyword">FROM</span> agents</div><div class="line">         ) ;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//找到所有与达拉斯或波士顿的客户相同的折扣客户</div><div class="line">Exp 4.4.8  Find all customers who have the same discount as that of any of the customers in Dallas or Boston.</div><div class="line"><span class="keyword">SELECT</span>  cid,  cname</div><div class="line"><span class="keyword">FROM</span>   customers</div><div class="line"><span class="keyword">WHERE</span>  discnt = <span class="keyword">SOME</span> (</div><div class="line"><span class="keyword">select</span>  discnt</div><div class="line"><span class="keyword">from</span>   customers</div><div class="line"><span class="keyword">where</span>  city=‘Dallas’  <span class="keyword">or</span>  city=‘Boston’ ) ;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Exp 4.4.9 Find cid values of customers with discnt smaller than those of any customers who live in Duluth.</div><div class="line"><span class="keyword">SELECT</span>  cid</div><div class="line"><span class="keyword">FROM</span>      customers</div><div class="line"><span class="keyword">WHERE</span>   discnt  &lt; ALL (</div><div class="line"><span class="keyword">SELECT</span>  discnt</div><div class="line"><span class="keyword">FROM</span>      customers</div><div class="line"><span class="keyword">WHERE</span>   city = ‘Duluth’ ) ;</div><div class="line"><span class="keyword">SELECT</span>  cid</div><div class="line"><span class="keyword">FROM</span>      customers  c1</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *</div><div class="line"><span class="keyword">FROM</span>    customers  c2</div><div class="line"><span class="keyword">WHERE</span>   c2.city = ‘Duluth’  <span class="keyword">and</span>      </div><div class="line">                           c1.discnt &gt;= c2. discnt  ) ;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Retrieve all customer names where the customer places an order through agent a05.</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname <span class="keyword">FROM</span>      customers c, orders o <span class="keyword">WHERE</span>   c.cid = o.cid  <span class="keyword">and</span>  o.aid = ‘a05’ ;</div><div class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname</div><div class="line"><span class="keyword">FROM</span>      customers</div><div class="line"><span class="keyword">WHERE</span>   cid   <span class="keyword">IN</span>  ( <span class="keyword">SELECT</span>   cid</div><div class="line"><span class="keyword">FROM</span>  orders</div><div class="line"><span class="keyword">WHERE</span>   aid = ‘a05’   ) ;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname</div><div class="line"><span class="keyword">FROM</span>      customers  c</div><div class="line"><span class="keyword">WHERE</span>   <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *</div><div class="line"><span class="keyword">FROM</span>     orders  o</div><div class="line"><span class="keyword">WHERE</span>  o.cid=c.cid  <span class="keyword">and</span>  o.aid=‘a05’ ) ;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Find all customer names where the customer does not place an order through agent a05.</div><div class="line">((C[cid] – (O where aid = ‘a05’) [cid])  C) [cname]</div><div class="line"><span class="keyword">SELECT</span>  cname<span class="keyword">FROM</span>  customers</div><div class="line"><span class="keyword">WHERE</span>   cid                     (</div><div class="line"><span class="keyword">SELECT</span>  o.cid    <span class="keyword">FROM</span>  orders  o    <span class="keyword">WHERE</span>  o.aid = ‘a05’ ) ;</div><div class="line"><span class="keyword">SELECT</span>  cname<span class="keyword">FROM</span>      customers  c</div><div class="line"><span class="keyword">WHERE</span>   <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *   <span class="keyword">FROM</span>  orders  o</div><div class="line"><span class="keyword">WHERE</span>   o.cid = c.cid  <span class="keyword">and</span>  o.aid = ‘a05’  ) ;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[Example] Find all cid, aid pairs where the customer does not place an order through the agent.</div><div class="line"><span class="keyword">SELECT</span>  cid,  aid</div><div class="line"><span class="keyword">FROM</span>  customers  c,  agents  a</div><div class="line"><span class="keyword">WHERE</span>   <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *</div><div class="line"><span class="keyword">FROM</span>  orders  o</div><div class="line"><span class="keyword">WHERE</span>  o.cid = c.cid  <span class="keyword">and</span>  o.aid = a.aid );</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span>  cid</div><div class="line"><span class="keyword">FROM</span>      customers  c</div><div class="line"><span class="keyword">WHERE</span>   <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *</div><div class="line"><span class="keyword">FROM</span>  orders  o</div><div class="line"><span class="keyword">WHERE</span>   o.cid = c.cid  <span class="keyword">and</span>  o.aid = ‘a03’  ) ;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Exp 2.9.4: Find products that have never been ordered by a customer based in New York through an agent based in Boston.</div><div class="line">T1 := (C where city = ‘New York’)[cid]</div><div class="line">T2 := (((T1  O)  A) where city = ‘Boston’) [pid]</div><div class="line">T3 := P[pid] – T2</div><div class="line">SQL:</div><div class="line"><span class="keyword">SELECT</span>  p.pid</div><div class="line"><span class="keyword">FROM</span>    products  p</div><div class="line"><span class="keyword">WHERE</span>  p.pid  <span class="keyword">NOT</span> <span class="keyword">IN</span> (</div><div class="line"><span class="keyword">SELECT</span> o.pid <span class="keyword">FROM</span>  customers c, agents a, orders o <span class="keyword">WHERE</span>  c.city=‘<span class="keyword">New</span> York’  <span class="keyword">and</span></div><div class="line">a.city=‘Boston’  <span class="keyword">and</span>  c.cid=o.cid <span class="keyword">and</span>  o.aid=a.aid ) ;</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Exp 2.9.11] List pids of products that are ordered through agents who place orders for (possibly different) customers who order at least one product from an agent who has placed an order for customer c001.</div></pre></td></tr></table></figure><h2 id="除法运算的理解"><a href="#除法运算的理解" class="headerlink" title="除法运算的理解"></a>除法运算的理解</h2><h3 id="除法运算的定义"><a href="#除法运算的定义" class="headerlink" title="除法运算的定义"></a>除法运算的定义</h3><blockquote><p>投影运算的含义简单点就是：从表中选择需要的属性列。</p><p>给定关系R(X,Y)和S(Y,Z),其中X,Y,Z为属性组。R中Y与S中的Y可以有不同的属性名,但必须出自相同的域集。R与S的除运算可以得到一个新的关系P(X),P是R中满足下列条件的元组在X 属性列上的投影: 元组在X上的分量值x的像集Y(x)包含S在Y上的投影的集合。<br>求解步骤过程：<br>第一步：找出关系R和关系S中相同的属性，即Y属性。在关系S中对Y做投影（即将Y列取出）；<br>第二步：被除关系R中与S中不相同的属性列是X，关系R在属性X上做取消重复值的投影；<br>第三步：求关系R中X属性对应的像集Y；<br>第四步：判断包含关系，R÷S其实就是判断关系R中X各个值的像集Y是否包含关系S中属性Y的所有值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; 列是属性,行是元组..</div><div class="line">&gt; 而且作投影之后可能会出现重复项,比如:</div><div class="line">&gt;  A B C  </div><div class="line">&gt; a1 b1 c1  </div><div class="line">&gt; a1 b2 c2  </div><div class="line">&gt; a2 b2 c3  </div><div class="line">&gt; 作A的投影就是a1, a2;  减少了一行</div><div class="line">&gt; 总结: </div><div class="line">&gt; 并:属性不变,元组可能增加(集合相等时不增加) </div><div class="line">&gt; 交:属性不变,元组可能减少(集合相等时不减少) </div><div class="line">&gt; 投影:属性可能减少(全投影时不减少),元组可能减少(投影后无重复项时不减少) </div><div class="line">&gt; 笛卡尔积:属性增加,元组可能增加(只有1个元组时不增加)</div><div class="line">&gt; 除运算：</div><div class="line">&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; 除运算：</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><strong>R：</strong></p><table><thead><tr><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>a1</td><td>b1</td><td>c2</td></tr><tr><td>a2</td><td>b3</td><td>c7</td></tr><tr><td>a3</td><td>b4</td><td>c6</td></tr><tr><td>a1</td><td>b2</td><td>c3</td></tr><tr><td>a4</td><td>b6</td><td>c6</td></tr><tr><td>a2</td><td>b2</td><td>c3</td></tr><tr><td>a1</td><td>b2</td><td>c1</td></tr></tbody></table><p><strong>S:</strong></p><table><thead><tr><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>b1</td><td>c2</td><td>d1</td></tr><tr><td>b2</td><td>c1</td><td>d1</td></tr><tr><td>b2</td><td>c3</td><td>d2</td></tr></tbody></table><p>R÷S</p><table><thead><tr><th>A</th></tr></thead><tbody><tr><td>a1</td></tr></tbody></table><p>(1) 找S与R的共同属性，其元组看做整体 k<br>(2)选择R中包含k的 非S与R相同属性的 属性 即为R÷S<br>*/<br>解答如下：<br>在关系R中，A可以取四个值{a1,a2,a3,a4}，其中：<br>a1的象集为：{（b1,c2），（b2,c3），（b2,c1）}就是a1 对应bc属性上的值<br>a2的象集为：{（b3,c7），（b2,c3）}<br>a3的象集为：{（b4,c6）}<br>a4的象集为：{（b6,c6）}<br>S在（B,C）上的投影为{(b1,c2),(b2,c3),(b2,c1)}。，只取BC两列<br>显然只有a1的象集（B,C）a1包含S在（B,C）属性组上的投影，全部包含，所以R÷S={a1}</p></blockquote><h3 id="SQL中除法运算的实现"><a href="#SQL中除法运算的实现" class="headerlink" title="SQL中除法运算的实现"></a>SQL中除法运算的实现</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">SQL中除法运算的实现</div><div class="line">R(X，Y)÷S(Y，Z)的运算用结构化语言SQL 语句可表达为下列形式:</div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> R.X <span class="keyword">from</span> R R1</div><div class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></div><div class="line">( <span class="keyword">select</span> S.Y <span class="keyword">from</span> S</div><div class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></div><div class="line">( <span class="keyword">select</span> * <span class="keyword">from</span> R R2</div><div class="line"><span class="keyword">where</span> R2.X=R1.X <span class="keyword">and</span> R2.Y=S.Y ) )</div><div class="line"></div><div class="line">同理, 基于多属性关系除法的<span class="keyword">SQL</span> 表达形式</div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> R1.X1, R1.X2, ⋯, R1.Xn</div><div class="line"><span class="keyword">from</span> R R1</div><div class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></div><div class="line">( <span class="keyword">select</span> S.Y1, S.Y2, ⋯, S.Ym <span class="keyword">from</span> S</div><div class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></div><div class="line">( <span class="keyword">select</span> * <span class="keyword">from</span> R R2</div><div class="line"><span class="keyword">where</span> R2.X1=R1.X1 <span class="keyword">and</span> R2.X2=R1.X2 <span class="keyword">and</span>……<span class="keyword">and</span> R2.Xn=R1.Xn <span class="keyword">and</span></div><div class="line">R2.Y1=S.Y1 <span class="keyword">and</span> R2.Y2=S.Y2 <span class="keyword">and</span>……<span class="keyword">and</span> R2.Ym=S.Ym) )</div></pre></td></tr></table></figure><h3 id="除法运算的案例"><a href="#除法运算的案例" class="headerlink" title="除法运算的案例"></a>除法运算的案例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">The division operation in Relational Algebra</div><div class="line"></div><div class="line">[Example 4.5.2] Find cids of customers who place orders with ALL agents based in New York.</div><div class="line">o[cid, aid]  (a where city=‘New York’)[aid]</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span>  c.cid    <span class="keyword">FROM</span>    customers  c</div><div class="line"><span class="keyword">WHERE</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *  <span class="keyword">FROM</span>  agents  a</div><div class="line"><span class="keyword">WHERE</span>  a.city = ‘<span class="keyword">New</span> York’  <span class="keyword">and</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *  <span class="keyword">FROM</span>  orders  o</div><div class="line"><span class="keyword">WHERE</span>  o.cid = c.cid  <span class="keyword">and</span>  o.aid = a.aid ) )</div></pre></td></tr></table></figure><blockquote><p>ALL是除法运算的一个关键词</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Exp 4.5.3: Get the aid values of agents in New York or Duluth who place orders for all products costing more than a dollar.</div><div class="line"><span class="keyword">SELECT</span>  aid</div><div class="line"><span class="keyword">FROM</span>    agents  a</div><div class="line"><span class="keyword">WHERE</span>  (city=‘<span class="keyword">New</span> York’ <span class="keyword">or</span> city=‘Duluth’) <span class="keyword">and</span></div><div class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *</div><div class="line"><span class="keyword">FROM</span>  products  p</div><div class="line"><span class="keyword">WHERE</span>  p.price &gt; <span class="number">1</span>  <span class="keyword">and</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *</div><div class="line"><span class="keyword">FROM</span>  orders  o</div><div class="line"><span class="keyword">WHERE</span>  o.aid=a.aid <span class="keyword">and</span> o.pid=p.pid))；</div></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Exp 4.5.4: Find aid values of agents who place orders for product p01 as well as for all products costing more than a dollar.</div><div class="line"><span class="keyword">SELECT</span>  aid    <span class="keyword">FROM</span>  agents  a</div><div class="line"><span class="keyword">WHERE</span>   aid <span class="keyword">IN</span> (  <span class="keyword">select</span> aid <span class="keyword">from</span> orders</div><div class="line">    <span class="keyword">where</span> pid=‘p01’ )</div><div class="line"><span class="keyword">and</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *    <span class="keyword">FROM</span>  products  p</div><div class="line"><span class="keyword">WHERE</span>  p.price &gt; <span class="number">1</span>  <span class="keyword">and</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</div><div class="line"><span class="keyword">SELECT</span>  *    <span class="keyword">FROM</span>  orders  o</div><div class="line"><span class="keyword">WHERE</span>  o.aid=a.aid <span class="keyword">and</span> o.pid=p.pid))</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Exp 4.5.5: Find cids for customers who order all products ordered by customer c006.</div><div class="line">      ORDERS [ cid, pid ]  除以 ( ORDERS where cid = ‘c006’ ) [ pid ]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    本文内容记载在我在学习数据库这门课程中的知识点，内容涵盖对sql关键字的讲解，sql语句的具体案例及分析。&lt;/p&gt;
    
    </summary>
    
      <category term="database" scheme="https://shangrila-kun.github.io/categories/database/"/>
    
    
      <category term="sql" scheme="https://shangrila-kun.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>js读取本地文件</title>
    <link href="https://shangrila-kun.github.io/2017/10/29/jsreadxml/"/>
    <id>https://shangrila-kun.github.io/2017/10/29/jsreadxml/</id>
    <published>2017-10-29T01:22:53.000Z</published>
    <updated>2017-10-29T02:10:36.612Z</updated>
    
    <content type="html"><![CDATA[<p>​    以前，在写页面的时候，都采取了硬编码，这次接到一个需求，做一个展示界面，用来展示各个项目，并提供入口，需求是展示界面的项目内容主要展示的是:已上线项目、待上线项目、内网项目，由于项目的划分多变，所以，最好是能够通过配置来展示页面的内容，就考虑了js读取本地xml。</p><a id="more"></a><h1 id="js读取xml"><a href="#js读取xml" class="headerlink" title="js读取xml"></a>js读取xml</h1><p>代码内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoLoadConf</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   </div><div class="line">       <span class="comment">/*读取配置文件*/</span></div><div class="line">       </div><div class="line">       $.ajax(&#123;</div><div class="line">                    <span class="attr">url</span>: <span class="string">"../nav/conf/links.xml"</span>,</div><div class="line">                    <span class="attr">dataType</span>: <span class="string">'xml'</span>,</div><div class="line">                    <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">                    <span class="attr">timeout</span>: <span class="number">2000</span>,</div><div class="line">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">xml</span>)</span></div><div class="line">                    &#123;</div><div class="line">                        alert(<span class="string">"读取配置文件失败！"</span>);</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">xml</span>)</span></div><div class="line">                    &#123;</div><div class="line"></div><div class="line">                        <span class="keyword">var</span> jqueryObject = $(xml);<span class="comment">//把读取的xum对象转换为jquery对象</span></div><div class="line">                        <span class="comment">/*已上线项目*/</span></div><div class="line">                        <span class="keyword">var</span> onlineArray = readXml(jqueryObject,<span class="string">"websites"</span>,<span class="string">"online_websites"</span>,<span class="string">"online_website"</span>);</div><div class="line">                        addLiContent($(<span class="string">"#onlineLinkUl"</span>),onlineArray);</div><div class="line">                        <span class="comment">/*待上线项目*/</span></div><div class="line">                        <span class="keyword">var</span> weiArray = readXml(jqueryObject,<span class="string">"websites"</span>,<span class="string">"wei_websites"</span>,<span class="string">"wei_website"</span>);</div><div class="line">                        addLiContent($(<span class="string">"#weiLinkUl"</span>),weiArray);</div><div class="line">                        <span class="comment">/*内网正式项目项目*/</span></div><div class="line">                        <span class="keyword">var</span> neiArray = readXml(jqueryObject,<span class="string">"websites"</span>,<span class="string">"nei_websites"</span>,<span class="string">"nei_website"</span>);</div><div class="line">                        addLiContent($(<span class="string">"#neiLinkUl"</span>),neiArray);</div><div class="line"></div><div class="line">              </div><div class="line">                    &#125;  </div><div class="line"></div><div class="line">                &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readXml</span>(<span class="params">jqueryObject,f1,f2,f3</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arrayObject = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    jqueryObject.find(f1).find(f2).find(f3).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> online = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    online.title = $(<span class="keyword">this</span>).find(<span class="string">"title"</span>).text();</div><div class="line">    online.link = $(<span class="keyword">this</span>).find(<span class="string">"link"</span>).text();</div><div class="line">    arrayObject.push(online);</div><div class="line">  &#125;);</div><div class="line">  <span class="built_in">console</span>.log(arrayObject);</div><div class="line">  <span class="keyword">return</span> arrayObject;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*给指定的ul添加li的内容*/</span></div><div class="line"><span class="comment">/*备注：class='item s"+((i+1)%9+1)+"' ((i+1)%9+1)此代码的写法是经过测试发现，css样式只有是s1到s9类。  */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLiContent</span>(<span class="params">ulObject,arrayObject</span>)</span>&#123;<span class="comment">//参数一，获取指定ul的对象，参数二，获取读xml遍历出来的数组</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arrayObject.length;i++)&#123;</div><div class="line">        <span class="keyword">var</span> hrefValue = arrayObject[i].link;</div><div class="line">        <span class="keyword">var</span> titleValue = arrayObject[i].title;</div><div class="line">        <span class="keyword">var</span> liHtml=<span class="string">"&lt;li class='item s"</span>+((i+<span class="number">1</span>)%<span class="number">9</span>+<span class="number">1</span>)+<span class="string">"' id=\"btn-in1\"&gt;"</span>+</div><div class="line">          <span class="string">"&lt;a href='"</span>+hrefValue+<span class="string">"'  target='_blank'&gt;"</span>+</div><div class="line">            <span class="string">"&lt;p class=\"pic\"&gt;&lt;span class=\"fa fa-database fa-5x\"&gt;&lt;/span&gt;&lt;/p&gt;"</span>+</div><div class="line">            <span class="string">"&lt;p class=\"name\"&gt;"</span>+titleValue+<span class="string">"&lt;/p&gt;&lt;p&gt;&lt;button class='btn-in in1' style=\"color: rgb(255, 255, 255); background: transparent;\"&gt;进入&lt;/button&gt;&lt;/p&gt;"</span>+</div><div class="line">        <span class="string">"&lt;/a&gt;&lt;/li&gt;"</span>;</div><div class="line">        ulObject.append(liHtml);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    以前，在写页面的时候，都采取了硬编码，这次接到一个需求，做一个展示界面，用来展示各个项目，并提供入口，需求是展示界面的项目内容主要展示的是:已上线项目、待上线项目、内网项目，由于项目的划分多变，所以，最好是能够通过配置来展示页面的内容，就考虑了js读取本地xml。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://shangrila-kun.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://shangrila-kun.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>linux安装软件教程</title>
    <link href="https://shangrila-kun.github.io/2017/10/13/linux20171013/"/>
    <id>https://shangrila-kun.github.io/2017/10/13/linux20171013/</id>
    <published>2017-10-13T07:10:29.000Z</published>
    <updated>2017-10-13T07:18:41.306Z</updated>
    
    <content type="html"><![CDATA[<p>​    每次想着安装linux上面的软件，有时候要去网上查资料，有时候测试之后才发现网上的有些资料的正确与否，或者是否过时，这个是我们目前所用到的教程，并经过自己实践后，整理如下：</p><a id="more"></a><h1 id="linux安装软件教程"><a href="#linux安装软件教程" class="headerlink" title="linux安装软件教程"></a>linux安装软件教程</h1><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>​    安装连接   <a href="http://www.linuxidc.com/Linux/2016-09/134941.htm" target="_blank" rel="noopener">点击即可</a></p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>​    安装链接  <a href="http://www.linuxidc.com/Linux/2016-09/134907.htm" target="_blank" rel="noopener">点击即可</a></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; 根据端口列进程</div><div class="line">&gt; netstat -ntlp | grep 80 </div><div class="line">&gt; kill -INT 进程号  杀某一进程</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><h3 id="Nginx下信号量"><a href="#Nginx下信号量" class="headerlink" title="Nginx下信号量"></a>Nginx下信号量</h3><blockquote><p>kill -INT 进程号  简单粗暴的杀死进程</p><p>kill -quit 优雅的杀死进程，等请求结束后，再关闭</p><p>kill -HUB 进程号   改变配置文件，平滑的重读配置文件</p><p>kill -HUN ‘cat logs/nginx.pid’优雅的更新配置</p></blockquote><h3 id="Nginx下的日志"><a href="#Nginx下的日志" class="headerlink" title="Nginx下的日志"></a>Nginx下的日志</h3><blockquote><p><a href="http://www.cnblogs.com/crazylqy/p/6891991.html" target="_blank" rel="noopener">nginx下日志管理</a></p><p><a href="http://www.cnblogs.com/mfryf/p/3336804.html" target="_blank" rel="noopener">tail命令</a></p><p><a href="http://www.cnblogs.com/ilanni/p/5365420.html" target="_blank" rel="noopener">nginx日志切割管理</a> </p></blockquote><h3 id="Ngnix下面的location匹配规则"><a href="#Ngnix下面的location匹配规则" class="headerlink" title="Ngnix下面的location匹配规则"></a>Ngnix下面的location匹配规则</h3><p><img src="http://upload-images.jianshu.io/upload_images/7882280-01cecbe1d8f921e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="123.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/7882280-731500b26046ea06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="456.png"></p><blockquote><p><a href="http://blog.csdn.net/qq_39781497/article/details/78038959" target="_blank" rel="noopener">nginx配置location总结</a>  </p></blockquote><h3 id="Nginx的rewrite重写"><a href="#Nginx的rewrite重写" class="headerlink" title="Nginx的rewrite重写"></a>Nginx的rewrite重写</h3><blockquote><p><a href="http://www.linuxidc.com/Linux/2014-01/95493.htm" target="_blank" rel="noopener">rewire重写</a> </p><p><a href="http://www.linuxidc.com/Linux/2014-01/95493.htm" target="_blank" rel="noopener">rewrite重写规则</a> </p></blockquote><h2 id="Mysql安装"><a href="#Mysql安装" class="headerlink" title="Mysql安装"></a>Mysql安装</h2><blockquote><p><a href="http://blog.csdn.net/hellozhijian/article/details/78067593" target="_blank" rel="noopener">mysql安装</a> </p></blockquote><h2 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h2><blockquote><p><a href="http://blog.csdn.net/default7/article/details/54925702" target="_blank" rel="noopener">tomcat的安装</a> </p></blockquote><h2 id="Mongodb3-4安装"><a href="#Mongodb3-4安装" class="headerlink" title="Mongodb3.4安装"></a>Mongodb3.4安装</h2><blockquote><p><a href="http://www.cnblogs.com/acewhl/p/6638486.html" target="_blank" rel="noopener">mongodb3.4安装</a> </p></blockquote><h2 id="查看系统版本信息"><a href="#查看系统版本信息" class="headerlink" title="查看系统版本信息"></a>查看系统版本信息</h2><blockquote><p><a href="http://www.linuxidc.com/Linux/2014-12/110748.htm" target="_blank" rel="noopener">如何查看已安装的CentOS版本信息</a></p><p>lsb_release 是查看系统版本信息的工具,如果出现-bash: lsb_release: command not found,解决方法：yum install redhat-lsb -y</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; [root@localhost ~]# lsb_release  -a</div><div class="line">&gt; LSB Version:    :core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0- noarch:printing-4.0-amd64:printing-4.0-noarch</div><div class="line">&gt; Distributor ID: CentOS</div><div class="line">&gt; Description:    CentOS Linux release 6.0 (Final)</div><div class="line">&gt; Release:        6.0</div><div class="line">&gt; Codename:       Final</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    每次想着安装linux上面的软件，有时候要去网上查资料，有时候测试之后才发现网上的有些资料的正确与否，或者是否过时，这个是我们目前所用到的教程，并经过自己实践后，整理如下：&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://shangrila-kun.github.io/categories/linux/"/>
    
    
      <category term="软件安装" scheme="https://shangrila-kun.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Hexo在多台电脑上提交和更新github pages博客</title>
    <link href="https://shangrila-kun.github.io/2017/09/10/hexo20170917/"/>
    <id>https://shangrila-kun.github.io/2017/09/10/hexo20170917/</id>
    <published>2017-09-10T01:10:29.000Z</published>
    <updated>2017-09-10T07:33:31.992Z</updated>
    
    <content type="html"><![CDATA[<p>​    在实验室电脑上用hexo搭建博客，但是，每次发博客的时候只能用实验室电脑发。于是想在宿舍电脑上也搭建一个，来协同工作。</p><a id="more"></a><p>​    由于实验室的小伙伴已经写了一份操作文档，我就直接粘贴链接过来。<a href="https://michaeljian.github.io/2017/09/07/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E6%8F%90%E4%BA%A4%E5%92%8C%E6%9B%B4%E6%96%B0github-pages%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">点击即可查看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    在实验室电脑上用hexo搭建博客，但是，每次发博客的时候只能用实验室电脑发。于是想在宿舍电脑上也搭建一个，来协同工作。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo系列干货" scheme="https://shangrila-kun.github.io/categories/hexo%E7%B3%BB%E5%88%97%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="多电脑操作githubblog" scheme="https://shangrila-kun.github.io/tags/%E5%A4%9A%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9Cgithubblog/"/>
    
  </entry>
  
  <entry>
    <title>添加Fork me on GitHub 小丝带</title>
    <link href="https://shangrila-kun.github.io/2017/08/30/0830githugfork/"/>
    <id>https://shangrila-kun.github.io/2017/08/30/0830githugfork/</id>
    <published>2017-08-30T11:27:28.000Z</published>
    <updated>2017-08-31T03:12:36.934Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在自己的博客上面挂一个Fork me on GitHub简直是一个装逼神器，更能体现出一个程序员的气质，经过从网上查找，将查找内容整理如下：</strong></p><a id="more"></a><h2 id="添加Fork-me-on-GitHub-小丝带"><a href="#添加Fork-me-on-GitHub-小丝带" class="headerlink" title="添加Fork me on GitHub 小丝带"></a>添加Fork me on GitHub 小丝带</h2><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><h4 id="第一步-创建一个ribbon-ejs"><a href="#第一步-创建一个ribbon-ejs" class="headerlink" title="第一步  创建一个ribbon.ejs"></a>第一步  创建一个ribbon.ejs</h4><p>​    <strong>在主题目录下的/layout/_partial下面创建一个ribbon.ejs，输入下面的代码进去</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ribbon"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/your username"</span>&gt;</span>Fork me on GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="第二步-添加代码到after-footer-ejs"><a href="#第二步-添加代码到after-footer-ejs" class="headerlink" title="第二步  添加代码到after_footer.ejs"></a>第二步  添加代码到after_footer.ejs</h4><p>​    <strong>接着要在/layout/_partial/after_footer.ejs中加入一行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%- partial(<span class="string">'ribbon'</span>) %&gt;</div><div class="line">  <span class="comment">//此代码的作用是确保这个div能在页面上显示出来。</span></div></pre></td></tr></table></figure><h4 id="第三步-创建ribbon-styl"><a href="#第三步-创建ribbon-styl" class="headerlink" title="第三步  创建ribbon.styl"></a>第三步  创建ribbon.styl</h4><p>​    <strong>添加css,hexo可以在主题目录的/source/css/_partial下创建一个ribbon.styl，然后把下面的代码复制进去。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ribbon</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#a00</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">white-space</span>: nowrap;</div><div class="line">  <span class="comment">/* top right corner */</span></div><div class="line">  <span class="attribute">position</span>: fixed;</div><div class="line">  <span class="attribute">right</span>: -<span class="number">50px</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</div><div class="line">  <span class="comment">/* 45 deg ccw rotation */</span></div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">     <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">      <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">       <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">  <span class="comment">/* shadow */</span></div><div class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#888</span>;</div><div class="line">     <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#888</span>;</div><div class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#888</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.ribbon</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#faa</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">font</span>: bold <span class="number">81.25%</span> <span class="string">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">1px</span> <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">50px</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">text-decoration</span>: none;</div><div class="line">  <span class="comment">/* shadow */</span></div><div class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#444</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="第四步-在style-styl中添加内容"><a href="#第四步-在style-styl中添加内容" class="headerlink" title="第四步  在style.styl中添加内容"></a>第四步  在style.styl中添加内容</h4><p>​    <strong>复制一下代码到style.styl（在主题目录下面的\source\css下面）的最后添加一行（针对Hexo博客用户）：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">if</span> <span class="selector-tag">ribbon</span></div><div class="line">    @<span class="keyword">import</span> <span class="string">'_partial/ribbon'</span></div></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>​    <strong>点击 <a href="http://www.haoeasy.cn" target="_blank" rel="noopener">效果图</a>     即可查看。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在自己的博客上面挂一个Fork me on GitHub简直是一个装逼神器，更能体现出一个程序员的气质，经过从网上查找，将查找内容整理如下：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo干货系列" scheme="https://shangrila-kun.github.io/categories/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Fork小丝带" scheme="https://shangrila-kun.github.io/tags/Fork%E5%B0%8F%E4%B8%9D%E5%B8%A6/"/>
    
  </entry>
  
  <entry>
    <title>java访问控制权限</title>
    <link href="https://shangrila-kun.github.io/2017/08/27/20170828java6/"/>
    <id>https://shangrila-kun.github.io/2017/08/27/20170828java6/</id>
    <published>2017-08-27T01:10:29.000Z</published>
    <updated>2017-08-29T13:08:45.905Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、 java中为什么要设计访问控制权限机制了？</strong></p><p>​    A：为了使用户不要调用他们不应该调用的部分，这些部分对于类内部的操作是必要的，但是它并不是客户端程序员所需接口的一部分。</p><p>​    B：为了让类库设计者可用更改类的内部工作方法，而不必担心会对用户造成重大影响。</p><a id="more"></a><p><strong>2、java中访问权限控制的等级？</strong></p><p>​    Public&gt; Protected &gt; 包访问权限（没有权限修饰词）default &gt; private </p><p><strong>3、包的介绍</strong></p><p>​    Java中包(package)的概念和C++中命名空间(namespace)的概念很类似，都可以限制类的作用域。二者最大的差别在于，Java中的包隐式地指明了类的树形层级结构（同时也是Java源码文件的目录结构）。这样做的好处在于：可以通过文件系统中对于文件路径唯一性的要求来限制类的唯一性。</p><p>​    编写一个Java源代码文件(<strong>.java</strong>文件)时，此文件通常被称为<strong>编译单元</strong>。在编译单元内最多允许有一个<strong>public</strong>类，且该类的名称必须与文件名完全相同（包括大小写）。</p><p>​    编译一个<strong>.java</strong>文件时，在<strong>.java</strong>文件中的每个类都会有一个<strong>.class</strong>输出文件，这个文件名和类名是相同的。Java可运行程序是一组可以打包并压缩为一个Java文档文件(JAR包，使用Java的jar文档生成器)的<strong>.class</strong>文件。Java解释器负责这些文件的查找、装载和解释。</p><p>​    类库实际上是一组类文件。其中每个<strong>.java</strong>文件最多允许有一个<strong>public</strong>类，以及任意数量的非<strong>public</strong>类。因此，每个文件都有一个构件。如果要将这些构件（每个构建有一个<strong>.java</strong>文件和若干个<strong>.class</strong>文件）组织起来，形成不同的群组，可以使用Java中的关键字<strong>package</strong>。</p><p>​    <strong>3.1 包的作用</strong></p><p>​    (1)     把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</p><p>​    (2)     如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</p><p>​    (3)     包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</p><p><strong>4、package：包访问权限</strong></p><p>​    如果不提供任何访问权限修饰词，则意味着它是<strong>包访问权限</strong>。</p><p>​    默认访问权限<strong>没有任何关键字</strong>，但通常是指<strong>包访问权限</strong>（有时也表示为<strong>friendly</strong>，有点像C++中的友元概念）。这意味着包中所有其他类都可以访问这个成员或方法，但是<strong>这个包之外的所有类不可以访问</strong>。</p><p>​    如果一个类、类属变量及方法不以这三种修饰符来修饰，它就是friendly类型的，那么包内的任何类都可以访问它，而包外的任何类都不能访问它(包括包外继承了此类的子类)，因此，这种类、类属变量及方法对包内的其他类是友好的，开放的，而对包外的其他类是关闭的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.notes.packages.test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"default method -- print()"</span>); &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>5、public：接口访问权限</strong></p><p>​    使用<strong>public</strong>关键字，就意味着被声明的成员或方法<strong>对所有人都是可以访问的</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"default method -- print()"</span>);</div></pre></td></tr></table></figure><p><strong>6、private ：无法访问</strong></p><p>​    使用<strong>private</strong>关键字，就意味着被声明的成员或方法，<strong>除了本类，其他任何类都无法访问</strong>。</p><p>应用场景：单例模式<a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/" target="_blank" rel="noopener">http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE; </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>7、protected:继承访问权限</strong></p><p>​    新类（称之子类或派生类）通过继承可以复用一个现有类（称之父类或基类），然后扩展基类的成员、方法。有时，基类的创建者会希望某个特定成员，将它的访问权限赋予派生类而不是所有类。<strong>public</strong>无法做到这一点，为此，引入了<strong>protected</strong>来完成这一工作。<strong>protected</strong>也提供包访问权限，也就是说，<strong>派生类以及相同包内的其他类都可以访问</strong>protected成员或方法**。</p><p>例：子类继承父类后，可以访问父类的protected成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String a = <span class="string">"private"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> String b = <span class="string">"protected"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String c = <span class="string">"public"</span>;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">publicvoid <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// System.out.println("element a：" + super.a); // Error</span></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"element b："</span> + <span class="keyword">super</span>.b);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"element c："</span> + <span class="keyword">super</span>.c);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">publicclass ProtectedDemo01 &#123;</div><div class="line"></div><div class="line">    <span class="function">publicstaticvoid <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">        Son sub = <span class="keyword">new</span> Son();</div><div class="line"></div><div class="line">        sub.print();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1、 java中为什么要设计访问控制权限机制了？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    A：为了使用户不要调用他们不应该调用的部分，这些部分对于类内部的操作是必要的，但是它并不是客户端程序员所需接口的一部分。&lt;/p&gt;
&lt;p&gt;​    B：为了让类库设计者可用更改类的内部工作方法，而不必担心会对用户造成重大影响。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://shangrila-kun.github.io/categories/Java/"/>
    
    
      <category term="访问控制权限" scheme="https://shangrila-kun.github.io/tags/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>SQL中execute操作返回false的问题</title>
    <link href="https://shangrila-kun.github.io/2017/08/15/20170823sql/"/>
    <id>https://shangrila-kun.github.io/2017/08/15/20170823sql/</id>
    <published>2017-08-15T05:57:36.000Z</published>
    <updated>2017-08-29T13:11:10.812Z</updated>
    
    <content type="html"><![CDATA[<p>​    <strong>今天在码代码的时候遇到了一个问题，代码如下：</strong></p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">SQL一：</div><div class="line">            sql = " <span class="keyword">update</span> t_receive_user <span class="keyword">set</span> user_email = ?, user_name = ?, user_tel = ?, update_timestamp = ? , note = ? <span class="string">" +</span></div><div class="line">                    " <span class="keyword">where</span> user_sid = ? <span class="string">";</span></div><div class="line">            connection = getDataSource().getConnection();</div><div class="line">            ps = connection.prepareStatement(sql);</div><div class="line">            ps.setObject(1,tReceiveUser.getUserEmail());</div><div class="line">            ps.setObject(2,tReceiveUser.getUserName());</div><div class="line">            ps.setObject(3,tReceiveUser.getUserTel());</div><div class="line">            ps.setObject(4,Time.getCurrentTime()/1000);</div><div class="line">            ps.setObject(5,tReceiveUser.getNote());</div><div class="line">            ps.setObject(6,tReceiveUser.getUserSid());</div><div class="line">            System.out.println(ps.execute());</div><div class="line">SQL二：</div><div class="line"> sql = " <span class="keyword">delete</span> t_receive_user <span class="keyword">where</span> user_sid = ? <span class="string">";</span></div><div class="line">            connection = getDataSource().getConnection();</div><div class="line">            ps = connection.prepareStatement(sql);</div><div class="line">            ps.setObject(1,tReceiveUser.getUserSid());</div><div class="line">            System.out.println(ps.execute());</div><div class="line">SQL三：</div><div class="line">sql = "<span class="keyword">INSERT</span> t_receive_user (user_email,user_name,user_tel,update_timestamp,note)<span class="string">" +</span></div><div class="line">                    " <span class="keyword">values</span> (?,?,?,?,?)<span class="string">";</span></div><div class="line">            ps = connection.prepareStatement(sql);</div><div class="line">            ps.setObject(1,tReceiveUser.getUserEmail());</div><div class="line">            ps.setObject(2,tReceiveUser.getUserName());</div><div class="line">            ps.setObject(3,tReceiveUser.getUserTel());</div><div class="line">            ps.setObject(4,Time.getCurrentTime()/1000);</div><div class="line">            ps.setObject(5,tReceiveUser.getNote());</div><div class="line">            System.out.println(ps.execute());</div></pre></td></tr></table></figure><p>​    <strong>我发现即使我的数据库更新成功、删除成功、增加成功，返回值都是false。</strong></p><p><strong>execute内部细节代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>.checkClosed().getConnectionMutex()) &#123;</div><div class="line">            <span class="keyword">boolean</span> returnVal = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">this</span>.checkStreamability();</div><div class="line">            <span class="keyword">this</span>.setInOutParamsOnServer();</div><div class="line">            <span class="keyword">this</span>.setOutParams();</div><div class="line">            returnVal = <span class="keyword">super</span>.execute();</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.callingStoredFunction) &#123;</div><div class="line">                <span class="keyword">this</span>.functionReturnValueResults = <span class="keyword">this</span>.results;</div><div class="line">                <span class="keyword">this</span>.functionReturnValueResults.next();</div><div class="line">                <span class="keyword">this</span>.results = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.retrieveOutParams();</div><div class="line">            <span class="keyword">return</span> !<span class="keyword">this</span>.callingStoredFunction?returnVal:<span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>​    <strong>查资料发现：boolean execute() throws SQLException在此 PreparedStatement 对象中执行 SQL 语句，该语句可以是任何种类的 SQL 语句。一些特别处理过的语句返回多个结果，execute 方法处理这些复杂的语句；executeQuery 和 executeUpdate 处理形式更简单的语句。 execute 方法返回一个 boolean 值，以指示第一个结果的形式。必须调用 getResultSet 或 getUpdateCount 方法来检索结果，并且必须调用 getMoreResults 移动到任何后面的结果返回：如果第一个结果是 ResultSet 对象，则返回 true；如果第一个结果是更新计数或者没有结果，则返回 false，意思就是如果是查询的话返回true，如果是更新或插入的话就返回false了；execute()返回的是一个boolean值,代表两种不同的操作啊,getResultSet()返回的是结果集,而getUpdateCount()返回的是更新的记数</strong>。</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;strong&gt;今天在码代码的时候遇到了一个问题，代码如下：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="https://shangrila-kun.github.io/categories/SQL/"/>
    
    
      <category term="execute问题" scheme="https://shangrila-kun.github.io/tags/execute%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Random</title>
    <link href="https://shangrila-kun.github.io/2017/08/04/Random20170804/"/>
    <id>https://shangrila-kun.github.io/2017/08/04/Random20170804/</id>
    <published>2017-08-04T05:10:29.000Z</published>
    <updated>2017-08-29T13:10:28.757Z</updated>
    
    <content type="html"><![CDATA[<p>​    关于java.util中的Random类，Random类中实现的随机算法是伪随机，也就是有规则的随机。在进行随机时，随机算法的起源数字称为种子数(seed)，在种子数的基础上进行一定的变换，从而产生需要的随机数字。</p><a id="more"></a><p>​    相同种子数的Random对象，相同次数生成的随机数字是完全相同的。也就是说，两个种子数相同的Random对象，第一次生成的随机数字完全相同，第二次生成的随机数字也完全相同。这点在生成多个随机数字时需要特别注意。</p><p>​    1、Random对象的生产：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(seedUniquifier() ^ System.nanoTime());</div><div class="line">    &#125;</div><div class="line"><span class="comment">//该构造方法使用一个和当前系统时间对应的相对时间有关的数字作为种子数，然后使用这个种子数构造Random对象。</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">(<span class="keyword">long</span> seed)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getClass() == Random.class)</div><div class="line">            <span class="keyword">this</span>.seed = <span class="keyword">new</span> AtomicLong(initialScramble(seed));</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// subclass might have overriden setSeed</span></div><div class="line">            <span class="keyword">this</span>.seed = <span class="keyword">new</span> AtomicLong();</div><div class="line">            setSeed(seed);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//该构造方法可以通过制定一个种子数进行创建。种子数只是随机算法的起源数字，和生成的随机数字的区间无关。</span></div></pre></td></tr></table></figure><p>​    2、Random类中的常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next(<span class="number">32</span>);</div><div class="line"> &#125;</div><div class="line"><span class="comment">//该方法的作用是生成一个随机的int值，该值介于int的区间，也就是-231到231-1之间。</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">(<span class="keyword">int</span> bound)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (bound &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(BadBound);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> r = next(<span class="number">31</span>);</div><div class="line">        <span class="keyword">int</span> m = bound - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> ((bound &amp; m) == <span class="number">0</span>)  <span class="comment">// i.e., bound is a power of 2</span></div><div class="line">            r = (<span class="keyword">int</span>)((bound * (<span class="keyword">long</span>)r) &gt;&gt; <span class="number">31</span>);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> u = r;</div><div class="line">                 u - (r = u % bound) + m &lt; <span class="number">0</span>;</div><div class="line">                 u = next(<span class="number">31</span>))</div><div class="line">                ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"><span class="comment">//该方法的作用是生成一个随机的int值，该值介于[0,n)的区间，也就是0到n之间的随机int值，包含0而不包含n。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// it's okay that the bottom word remains signed.</span></div><div class="line">        <span class="keyword">return</span> ((<span class="keyword">long</span>)(next(<span class="number">32</span>)) &lt;&lt; <span class="number">32</span>) + next(<span class="number">32</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">nextBoolean</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next(<span class="number">1</span>) != <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//该方法的作用是生成一个随机的boolean值，生成true和false的值几率相等，也就是都是50%的几率。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (((<span class="keyword">long</span>)(next(<span class="number">26</span>)) &lt;&lt; <span class="number">27</span>) + next(<span class="number">27</span>)) * DOUBLE_UNIT;</div><div class="line">&#125;</div><div class="line"><span class="comment">//该方法的作用是生成一个随机的double值，数值介于[0,1.0)之间。</span></div></pre></td></tr></table></figure><p>​    3、Random类使用示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> d1 = r.nextDouble();<span class="comment">//生成[0,1.0)区间的小数</span></div><div class="line"><span class="keyword">double</span> d2 = r.nextDouble() * <span class="number">5</span>;<span class="comment">//生成[0,5.0)区间的小数</span></div><div class="line"><span class="keyword">double</span> d3 = r.nextDouble() * <span class="number">1.5</span> + <span class="number">1</span>;<span class="comment">//生成[1,2.5)区间的小数</span></div><div class="line"><span class="keyword">int</span> n1 = r.nextInt();<span class="comment">//int n1 = r.nextInt();</span></div><div class="line"><span class="keyword">int</span> n2 = r.nextInt(<span class="number">10</span>);<span class="comment">//成[0,10)区间的整数</span></div><div class="line">n2 = Math.abs(r.nextInt() % <span class="number">10</span>);<span class="comment">//成[0,10)区间的整数,首先调用nextInt()方法生成一个任意的int数字，该数字和10取余以后生成的数字区间为(-10,10)，</span></div><div class="line"><span class="comment">//然后再对该区间求绝对值，则得到的区间就是[0,10)了。</span></div></pre></td></tr></table></figure><p>​    4、相同种子数Random对象问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//相同种子数的Random对象，相同次数生成的随机数字是完全相同的，下面是测试的代码：</span></div><div class="line"></div><div class="line">Random r1 = <span class="keyword">new</span> Random(<span class="number">10</span>);</div><div class="line"></div><div class="line">Random r2 = <span class="keyword">new</span> Random(<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">2</span>;i++)&#123;</div><div class="line"></div><div class="line">  System.out.println(r1.nextInt());</div><div class="line"></div><div class="line">  System.out.println(r2.nextInt());</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在该代码中，对象r1和r2使用的种子数都是10，则这两个对象相同次数生成的随机数是完全相同的。</span></div><div class="line"><span class="comment">//如果想避免出现随机数字相同的情况，则需要注意，无论项目中需要生成多少个随机数字，都只使用一个Random对象即可。</span></div></pre></td></tr></table></figure><p>​    5、Random对象生成概率问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> scoreNumber = <span class="number">1000</span>;</div><div class="line">        <span class="keyword">int</span> zero =<span class="number">0</span>, one = <span class="number">1</span>,two = <span class="number">2</span>, three = <span class="number">3</span>,four = <span class="number">4</span>,five =<span class="number">5</span>;</div><div class="line">        <span class="keyword">int</span> zeroTag =<span class="number">0</span>,oneTag =<span class="number">0</span>,twoTag =<span class="number">0</span>,threeTag =<span class="number">0</span>,fourTag =<span class="number">0</span>,fiveTag =<span class="number">0</span>;</div><div class="line">        Double zeroProportion,oneProportion,twoProportion,threeProportion,fourProportion,fiveProportion;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;scoreNumber;i++)&#123;</div><div class="line">            Random r = <span class="keyword">new</span> Random();</div><div class="line">            <span class="keyword">int</span> number = r.nextInt(<span class="number">6</span>);</div><div class="line">            <span class="keyword">if</span>(number==zero)&#123;</div><div class="line">                zeroTag++;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number==one)&#123;</div><div class="line">                oneTag++;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number==two)&#123;</div><div class="line">                twoTag++;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number==three)&#123;</div><div class="line">                threeTag++;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number==four)&#123;</div><div class="line">                fourTag++;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number==five)&#123;</div><div class="line">                fiveTag++;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                System.out.println(<span class="string">"随机数生成异常"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        zeroProportion = <span class="number">1.0</span>*zeroTag/scoreNumber;</div><div class="line">        oneProportion = <span class="number">1.0</span>*oneTag/scoreNumber;</div><div class="line">        twoProportion = <span class="number">1.0</span>*twoTag/scoreNumber;</div><div class="line">        threeProportion = <span class="number">1.0</span>*threeTag/scoreNumber;</div><div class="line">        fourProportion = <span class="number">1.0</span>*fourTag/scoreNumber;</div><div class="line">        fiveProportion = <span class="number">1.0</span>*fiveTag/scoreNumber;</div><div class="line">        Double total = zeroProportion+oneProportion+twoProportion+threeProportion+fourProportion+fiveProportion;</div><div class="line">        System.out.println(<span class="string">"zeroProportion="</span>+zeroProportion+<span class="string">","</span>+<span class="string">"oneProportion="</span>+oneProportion+<span class="string">","</span>+<span class="string">"twoProportion="</span>+twoProportion+<span class="string">","</span>+<span class="string">"threeProportion="</span>+threeProportion+<span class="string">","</span>+<span class="string">"fourProportion="</span>+fourProportion+<span class="string">","</span>+<span class="string">"fiveProportion="</span>+fiveProportion);</div><div class="line">        System.out.println(<span class="string">"total="</span>+total);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//当scoreNumber = 1000时</span></div><div class="line"><span class="comment">//zeroProportion=0.167,oneProportion=0.158,twoProportion=0.19,threeProportion=0.144,fourProportion=0.169,fiveProportion=0.172，total=1.0</span></div><div class="line"><span class="comment">//当scoreNumber = 10000时</span></div><div class="line"><span class="comment">//zeroProportion=0.1694,oneProportion=0.169,twoProportion=0.1594,threeProportion=0.1632,fourProportion=0.1708,fiveProportion=0.1682 total=1.0</span></div><div class="line"><span class="comment">//当scoreNumber = 1000000时</span></div><div class="line"><span class="comment">//zeroProportion=0.16682,oneProportion=0.166072,twoProportion=0.166039,threeProportion=0.167245,fourProportion=0.16649,fiveProportion=0.167334 total=1.0</span></div></pre></td></tr></table></figure><p>​    6、关于Math类中的random方法</p><p>​    其实在Math类中也有一个random方法，该random方法的工作是生成一个[0,1.0)区间的随机小数。通过阅读Math类的源代码可以发现，Math类中的random方法就是直接调用Random类中的nextDouble方法实现的。只是random方法的调用比较简单，所以很多程序员都习惯使用Math类的random方法来生成随机数字。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    关于java.util中的Random类，Random类中实现的随机算法是伪随机，也就是有规则的随机。在进行随机时，随机算法的起源数字称为种子数(seed)，在种子数的基础上进行一定的变换，从而产生需要的随机数字。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://shangrila-kun.github.io/categories/Java/"/>
    
    
      <category term="随机数" scheme="https://shangrila-kun.github.io/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>台式主机用那个接口和显示器相连，分辨率效果最好？</title>
    <link href="https://shangrila-kun.github.io/2017/07/23/20170723computerDevice/"/>
    <id>https://shangrila-kun.github.io/2017/07/23/20170723computerDevice/</id>
    <published>2017-07-23T05:10:29.000Z</published>
    <updated>2017-08-29T13:11:19.805Z</updated>
    
    <content type="html"><![CDATA[<p>​    <strong>随着高清技术的普及，各种高清接口已经不再罕见。如何选择，才能让我们电脑分辨率更清晰了。为了解决以上问题，我们先来认识一下电脑主机显示输出接口：</strong></p><a id="more"></a><p>​    <strong>1.分清电脑主机显示输出接口</strong></p><p>​    电脑常用的视频接口为: VGA(D-Sub)模拟传输接口，  DVI数字高清接口，HDMI数字高清接口， S视频端子接口。</p><p>​      VGA(D-Sub)是模拟视频接口，较为常见，一般是蓝色的。 各种计算机一般均有，这种接口，但是某些高配计算机或高端显卡则放弃了这种接口。</p><p>DVI数字高清接口也较为常见， 相比更先进的HDMI数字在DVI基础上增加了传输声音的信道， 在传输图像的同时支持传输声音，切支持更高的分辨率。</p><p>S端子视频接口，比较传统，用于兼容较旧的显示器或监视器，监控中使用较多。</p><p><img src="http://lyj.fj61.net/upload/2016-08/16080120106215.jpg" alt="“主机接口说明”的图片搜索结果"></p><p>​    <strong>2.分清显示器显示输出接口</strong></p><p>​    对应显示器常用接口有“传统模拟VGA”，“数字高清DVI”,“新一代数字高清HDMI”。  如下图所示。</p><p>​                            <img src="http://f.hiphotos.baidu.com/exp/w=500/sign=2d61305e710e0cf3a0f74efb3a47f23d/9213b07eca806538b1e4395f94dda144ad348274.jpg" alt="主机应该用那个接口和显示器相连效果最好？"></p><p>​    <strong>3.选择合适的连接方式</strong></p><p>​    ① 如果显示器只有VGA接口，则只能用VGA线连接，如果信号不好可以考虑购买质量较好的VGA线，保证传输质量，同时信号线和电源线保持距离，避免干扰。</p><p>​    ②如果有VGA接口，又有DVI接口， 那么首选主机后面和显示器后面均为DVI的相连。</p><p>​    ③如果显示器和电脑主机均有VGA\DIV\HDMI接口，如果在不考虑声音的情况下，依然建议使用DVI接口，以保证显示稳定性。</p><p>​    ④如果有两台显示器，想接双屏显示，可以将显卡的两个接口均连接，如下图所示。</p><p>​    ⑤如果接口不同，可以考虑转换， 可以通过线材直接转换的接口有：DVI转VGA， HDMI转DVI，如下图所示。</p><p>​                            <img src="http://e.hiphotos.baidu.com/exp/w=500/sign=13f906f784d6277fe912323818391f63/472309f790529822e6f6ab8fd4ca7bcb0b46d4b1.jpg" alt="主机应该用那个接口和显示器相连效果最好？"></p><p>​    <strong>4.显示器和主机相连时常见故障分析</strong></p><p>​    ①黑屏，什么都不显示。  检查主机和显示器是否通电， 检查主机后面是否多个显示输出口，尝试更换接口。</p><p>​    ②显示不稳定，有缺色、偏红、偏绿等现象， 很可能是VGA线接触不好，检查插紧连接线即可。</p><p>​    ③图像卡顿，不流畅，这很可能是连接线带宽不足造成的，建议换成DVI数字高清线或HDMI数字高清线。</p><p>​    ④一台主机连接两个显示器，只有一个亮， 另一个不能显示。 很可能是显卡驱动问题， 可以更新驱动设置双屏输出即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;strong&gt;随着高清技术的普及，各种高清接口已经不再罕见。如何选择，才能让我们电脑分辨率更清晰了。为了解决以上问题，我们先来认识一下电脑主机显示输出接口：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Device" scheme="https://shangrila-kun.github.io/categories/Computer-Device/"/>
    
    
      <category term="显示器接口" scheme="https://shangrila-kun.github.io/tags/%E6%98%BE%E7%A4%BA%E5%99%A8%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>DVI、VGA、HDMI</title>
    <link href="https://shangrila-kun.github.io/2017/07/23/20170722vgadbihdmi/"/>
    <id>https://shangrila-kun.github.io/2017/07/23/20170722vgadbihdmi/</id>
    <published>2017-07-23T02:10:29.000Z</published>
    <updated>2017-08-29T13:11:31.064Z</updated>
    
    <content type="html"><![CDATA[<p>​    <strong>显示器接口</strong></p><p>​    <strong>最常见的显示器接口有VGA端子、数码视频接口 (DVI)、高画质多媒体接口(HDMI)和DisplayPort（DP）</strong>。</p><a id="more"></a><p>​    <strong>目前的高清设备中,主要的接口有DVI、HDMI、VGA接口,其中VGA传输的是模拟视频信号,DVI传播的是数字视频信号,HDMI可以同时传输数字视频信号和数字音频信号。</strong></p><p>​    <strong>DVI介绍</strong></p><p>​    DVI接口是在1999年推出的接口标准。DVI接口的传输信号采用全数字格式。DVI接口有多种规格,DVI一共分为5种标准。其中DVI-D和DVI-I分为“双通道”和“单通道”两种类型。</p><p>​    某些较新型的DVD播放器，电视机（包括HDTV）以及投影机采用了所谓”DVI/HDCP”接头，这种接头在外型上完全与DVI相同，但是其传送的数据有经过<strong>HDCP</strong>协议所加密以防止非法复制。</p><p>​    现今装有DVI接口显示适配器的计算机经常可利用前述显示设备作为大型屏幕之用，但由于2007年之前产制的显示适配器大多不支持HDCP，所以可能会受到版权保护技术的限制而无法以最高分辨率播放受到HDCP保护的视讯内容。</p><p><img src="http://hiphotos.baidu.com/exp/pic/item/8367d1fc1e178a8273dd523df403738da877e80f.jpg" alt="img align=center"></p><p><img src="https://img20.360buyimg.com/vc/jfs/t5812/44/1574591949/238304/a0eb5da9/5927cfa5Na1335ae0.jpg" alt="img align=center"></p><p><img src="https://img20.360buyimg.com/vc/jfs/t5992/316/406492071/316550/4813525f/5927cfa6N5dce1835.jpg" alt="img"></p><hr><p><strong>VGA介绍</strong></p><p>​    VGA<strong>（</strong>Video Graphics Array）是IBM于1987年提出的一个使用模拟信号的电脑显示标准，这个标准已对于现今的个人电脑市场已经十分过时。即使如此，VGA仍然是最多制造商所共同支持的一个低标准，个人电脑在加载自己的独特驱动程式之前，都必须支持VGA的标准。例如，微软Windows系列产品的开机画面仍然使用VGA显示模式，这也说明其分辨率和载色数的不足。</p><p>​    VGA接口应用范围非常广泛，是三种接口中最先推出的标准，VGA接口，也叫D-Sub接口。虽然液晶显示器可以直接接收数字信号，但很多低端产品为了与VGA接口显卡相匹配，因而采用VGA接口。VGA接口是一种D型接口，上面共有15针空，分成三排，每排五个。VGA接口是显卡上应用最为广泛的接口类型，绝大多数的显卡都带有此种接口。</p><p>​    <strong>虽然许多设备仍然包括VGA端子，VGA通常与DVI标准共存，但VGA和DVI正在迅速淘汰，以支持更新和更紧凑的HDMI和DisplayPort接口，</strong>当播放更高分辨率的视频时，VGA传输带宽足够高，图像质量可能会因电缆质量和长度而下降。VGA只有图像输入，没有声音输入**。</p><p><img src="https://img20.360buyimg.com/vc/jfs/t2806/334/1737123184/88032/76d5e915/5747fef5N1ed7bccc.jpg" alt="img align=center"></p><p><img src="https://img20.360buyimg.com/vc/jfs/t2926/179/15369873/181961/94a3ccfd/5747fef4N7504f378.jpg" alt="img align=center"></p><hr><p><strong>HDMI介绍</strong></p><p>​    HDMI可用于机顶盒、DVD播放器、个人计算机、电视游乐器、综合扩大机、数字音响与电视机等设备。HDMI 的出现取代了模拟信号视频，而DisplayPort的出现则取代的是DVI和VGA接口。</p><p><img src="https://img20.360buyimg.com/vc/jfs/t4057/113/415929579/911157/ddcc1ae0/584e3c57Nf00e81cf.jpg" alt="img align=center"></p><p><strong>DisplayPort（DP）介绍</strong></p><p>​    <strong>DisplayPort</strong>（简称DP）是视频电子标准协会（VESA）推动的数字式视讯接口标准，订定于2006年5月。该接口订定免认证、免授权金，发展中的新型数字式音频／视讯界面，主要适应于连接计算机和屏幕，或是计算机和家庭剧院系统。有意要取代旧有的VGA、DVI和FPD-Link（LVDS）视频传输接口技术。</p><p>​    1.DisplayPort内部传输数据方式与DVI、HDMI不同，所以不能像DVI与HDMI间互转那样一个转接头搞定。但可以透过芯片转接成D-sub、DVI、HDMI。</p><p>​    2.DisplayPort 1.2支持MST（Multi-Stream Transport），单个DP可连接到多个显示器。</p><p>​    3.支援USB Type-C。</p><p><img src="https://img20.360buyimg.com/vc/jfs/t2851/144/3970756909/111349/438d4a13/57a400b2N8d341ec7.jpg" alt="img align=center"></p><p><strong>VGA和DVI的区别</strong></p><p>​      VGA模拟信号的传输比较麻烦，首先是将电脑内的<strong>数字信号转换为模拟信号</strong>，将信号发送到LCD显示器，由显示器再将该模拟信号转换为数字信号，形成画面展示在大家面前。<strong>正因为如此，中间的信号丢失严重，虽然可以通过软件的方法修复部分画面，但是随着显示器的分辨率越高画面就会越模糊。一般模拟信号在超过1280×1024分辨率以上的情况下就会出现明显的误差，分辨率越高越严重。但DVI接口考虑的对象是PC，对于笔记本、平板电视的兼容能力一般。</strong>另外DVI接口出于兼容性考虑，预留了不少引脚以支持模拟设备，造成接口体积较大，效率很低。</p><p><strong>DVI和HDMI区别</strong></p><p>1、新增了对新型无损压缩数字音频格式Dolby TrueHD和DTS-HD Master Audio的支持。</p><p>2、更高的刷新率：在同样1920x1080分辨率的模式下，HDMI1.3提供165Hz刷新率比双通道DVI接口的120Hz刷新率更高。</p><p>3、以太网络通道：HDMI规格1.4在缆线中增加了数据通路, 来达成双向高速的传送。有此功能的设备在连结后，将可用以太线100Mb/秒的速度发送和接收数据, 并使这些设备立即成为IP基础的设备。HDMI以太网络通道可让集成互联网功能的HDMI设备，无需使用其他以太网络线缆，即可与其他HDMI设备共享其互联网连线。此一新功能同时也提供HDMI设备间共享内容所需的互连架构。</p><p>4、更高的分辨率：支持3840×2160 24Hz/25Hz/30Hz；4096×2160 24Hz分辨率。新规格支持4096×2160分辨率，使得HDMI界面得以用许多数字影院所采用的同等标准分辨率的内容传输。而双通道DVI接口只能支持到2560x1600分辨率。</p><p><strong>VGA与HDMI区别</strong></p><p>HDMI除以上的特点和是数字信号传输外，标准HDMI接口大小（宽约14MM，高约4.5MM）比VGA（宽：16MM，高约：7.9MM）更省空间，但HDMI线材制造价格更高。</p><p><strong>VGA转DVI接口</strong></p><p>​    VGA和DVI互转：模拟信号和数字信号的转换，视频信号损失，造成失真。最好不要这样转换。</p><p><img src="https://img10.360buyimg.com//n0/g7/M02/10/15/rBEHZVDKgr8IAAAAAADOudtNauIAADQjgGJ46AAAM7R583.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;strong&gt;显示器接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;最常见的显示器接口有VGA端子、数码视频接口 (DVI)、高画质多媒体接口(HDMI)和DisplayPort（DP）&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Device" scheme="https://shangrila-kun.github.io/categories/Computer-Device/"/>
    
    
      <category term="显示器接口" scheme="https://shangrila-kun.github.io/tags/%E6%98%BE%E7%A4%BA%E5%99%A8%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>HDMI线</title>
    <link href="https://shangrila-kun.github.io/2017/07/22/20170722hdmi/"/>
    <id>https://shangrila-kun.github.io/2017/07/22/20170722hdmi/</id>
    <published>2017-07-22T14:08:29.000Z</published>
    <updated>2017-08-29T13:11:41.874Z</updated>
    
    <content type="html"><![CDATA[<p>​    <strong>HDMI的英文全称是“High Definition Multimedia Interface”,即高清晰度多媒体接口。它可以无压缩的传送音频信息\ 视频信号。</strong></p><a id="more"></a><p>​    HDMI提供所有兼容装置，–比如机顶盒、DVD播放机、个人电脑、电视等设备。HDMI 是首个也是唯一一个在单数字接口中集成不压缩的高清晰度视频、多声道音频和智能格式与命令数据的数字接口。对于家庭用户来说，最大的好处是享受高清晰数字视频的同时也享受了高档的声效。HDMI在保证高档多声道声效的同时简化了线路，因此非常适合家用电器设备之间的传输。</p><p>​    HDMI支持5Gbps的数据传输率，最远可传输15米，足以应付一个1080p的视频和一个8声道的音频信号。而因为一个1080p的视频和一个8声道的音频信号需求少于4GB/s，因此HDMI还有很大余量。这允许它可以用一个电缆分别连接DVD播放器，接收器和PRR。此外HDMI支持EDID、DDC2B，因此具有HDMI的设备具有”即插即用”的特点，信号源和显示设备之间会自动进行”协商”，自动选择最合适的视频/音频格式。在最新的HDMI 1.3b规范中，其带宽已经翻倍提升到了10.2GB/s，分辨率也由原来的1920×1080提升到了2560×1600。</p><hr><p>​    <strong>以下是我从京东某点选取了几张HDMI图片,这个线也是我们实验室常购买的。</strong></p><p><img src="https://img20.360buyimg.com/vc/jfs/t3925/150/395357929/516337/185fb92d/584e3c40Ne5d17e62.jpg" alt="img align=center"></p><p><img src="https://img20.360buyimg.com/vc/jfs/t3250/116/8269149857/471048/5827d2bb/58c21c69N6327cf93.jpg" alt="img align=center"></p><p><img src="https://img20.360buyimg.com/vc/jfs/t3067/243/4576279079/588948/f5e81448/584e3c44N44db2cc6.jpg" alt="img align=center"></p><p><img src="https://img20.360buyimg.com/vc/jfs/t4057/113/415929579/911157/ddcc1ae0/584e3c57Nf00e81cf.jpg" alt="img align=center"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;strong&gt;HDMI的英文全称是“High Definition Multimedia Interface”,即高清晰度多媒体接口。它可以无压缩的传送音频信息\ 视频信号。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Device" scheme="https://shangrila-kun.github.io/categories/Computer-Device/"/>
    
    
      <category term="HDMI" scheme="https://shangrila-kun.github.io/tags/HDMI/"/>
    
  </entry>
  
  <entry>
    <title>A、B、C、D、E类地址知识点</title>
    <link href="https://shangrila-kun.github.io/2017/07/22/network0722/"/>
    <id>https://shangrila-kun.github.io/2017/07/22/network0722/</id>
    <published>2017-07-22T07:42:18.000Z</published>
    <updated>2017-08-29T13:10:49.956Z</updated>
    
    <content type="html"><![CDATA[<p><strong>A类地址</strong></p><p>​    </p><table><thead><tr><th>0</th><th>网络号</th><th>主机号</th></tr></thead><tbody><tr><td>1位</td><td>7位</td><td>24位</td></tr></tbody></table><a id="more"></a><p>​    一个A类网络地址由一个字节（每个字节是8位）的<strong>网络地址</strong>和3个字节<strong>主机地址</strong>组成，网络地址的最高位必须是0。A类地址的第一个字段的范围是0-127,但是由于全0或者全1的地址用作特殊用途<a href="全零（0.0.0.0）地址指任意网络地址。全“1”的ip地址（255.255.255.255）是当前子网的广播地址。全0和全1是保留地址，仅作为实验和开发用，一般公司和用户无使用权。">^注释</a>，实际可指派的第一个字段的范围是1-126。</p><p>​    因此，A类地址的IP范围是：<strong>1.0.0.1 到 126.255.255.254</strong>。（备注：一个网络中，主机号全为0的代表这个网络本身。称之为：网络号，这个地址是不可以分配给主机的，主机号是全1的地址是广播地址，假如你给这个地址发数据包，这个网络内的所有主机都能收到）。</p><p>​    一个A类网络可提供的主机地址为2^24-2。[这里减2的原因是主机地址全0表示”本主机“连接到的单个网络地址，而全1表示该网络上的所有主机]</p><p>​    A类地址适用于具有大量主机而局域网络个数较少的大型网络。例如：IBM公司的网络。</p><hr><p><strong>B类地址</strong></p><table><thead><tr><th>1</th><th>0</th><th>网络号</th><th>主机号</th></tr></thead><tbody><tr><td>1位</td><td>1位</td><td>14位</td><td>16位</td></tr></tbody></table><p>​    一个B类地址由2个字节的<strong>网络地址</strong>和2个字节的<strong>主机地址</strong>组成，网络地址的最高位必须是“10”，第一段数字的范围是128（1000 000）到191（1011 1111，即128+63=191,一个A类网络可提供的主机地址为2^16-2，因为主机号各位不能同时为0,1）,Internet有2^14-1个B类地址（备注：第2个字节不能全为0，因为128.0.0.0是不指派的）。B类地址的IP范围是：<strong>128.1.0.1到191,255.255.254</strong>。</p><p>​    B类地址适用于节点比较多的网络。</p><hr><p><strong>C类地址</strong></p><table><thead><tr><th>1</th><th>1</th><th>0</th><th>网络号</th><th>主机号</th></tr></thead><tbody><tr><td>1位</td><td>1位</td><td>1位</td><td>21位</td><td>8位</td></tr></tbody></table><p>​    一个A雷网络地址由三个字节（每个字节是8位）的<strong>网络地址</strong>和一个字节<strong>主机地址</strong>组成，网络地址的最高位必须是110。A类地址的第一个字段的范围是192-223。每个C类地址可以连接的主机有2^8-2台主机，（0号是网络号不可用255是广播地址），Internet有2^5 <em> 2^8 </em> 2^8 个C类地址。</p><p>​    C类地址较多，适用于小规模的局域网络，每个网络最多只能包含254台计算机。</p><hr><p><strong>D类地址</strong></p><table><thead><tr><th>1</th><th>1</th><th>1</th><th>0</th><th>多播组号</th></tr></thead><tbody><tr><td>1位</td><td>1位</td><td>1位</td><td>1位</td><td>28位</td></tr></tbody></table><p>​    D类地址不分<strong>网络地址</strong>和<strong>主机地址</strong>，它的第一个字节的最高位必须是1110。它是多点播送地址，用于多目的地信息的传输，和作为备用。</p><hr><p><strong>E类地址</strong></p><table><thead><tr><th>1</th><th>1</th><th>1</th><th>1</th><th>0</th><th>留着代用</th></tr></thead><tbody><tr><td>1位</td><td>1位</td><td>1位</td><td>1位</td><td>1位</td><td>27位</td></tr></tbody></table><p>E类地址保留，仅作为实验和开发使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;A类地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;网络号&lt;/th&gt;
&lt;th&gt;主机号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1位&lt;/td&gt;
&lt;td&gt;7位&lt;/td&gt;
&lt;td&gt;24位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Network" scheme="https://shangrila-kun.github.io/categories/Network/"/>
    
    
      <category term="TCP/IP协议" scheme="https://shangrila-kun.github.io/tags/TCP-IP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>我的博客</title>
    <link href="https://shangrila-kun.github.io/2017/07/21/hellohk/"/>
    <id>https://shangrila-kun.github.io/2017/07/21/hellohk/</id>
    <published>2017-07-21T09:57:36.000Z</published>
    <updated>2017-08-29T13:10:59.709Z</updated>
    
    <content type="html"><![CDATA[<p>​    <strong>在github上搭建一个个人博客一直是我的想法。2年前，我的一个朋友陆沉也推荐过，曾经简单地弄了下，仅搭建好了一个空的框架，没有在里面发表任何博文，现在回想起来，很是遗憾！</strong></p><a id="more"></a><p>​    <strong>最近想整理一下所学的知识，记录下自己生活、学习的轨迹，萌生了写博客的欲望。于是在github上找了一些优秀的博客模板，经过筛选，选中了这一套风格，昨天从开始，到博客搭建完成，用了将近4个小时，里面也走了很多弯路，试试了好几种方法，现在整理如下，有需要的朋友，可以从中借鉴、参考：</strong></p><hr><p>​    首先，我在知乎上搜了下：在github中有哪些好的hexo博客模板，原文链接是：<a href="https://www.zhihu.com/question/39388850?sort=created" target="_blank" rel="noopener">https://www.zhihu.com/question/39388850?sort=created</a>.</p><p>​    大家可以在这里面选，喜欢我这套，也可以fork我的github仓库，当然世界是多姿多彩的，可以继续在浩瀚的世界搜索自己想要的。</p><pre><code>选中模板之后，如果没有安装git、node.js、hexo软件，博主推荐一篇安装的教程：&lt;http://www.jianshu.com/p/863f3f2d1733&gt;。建议按照这个流程，把博客安装流程都走一遍。如果博主推荐的这篇文章不够详细，可以搜一下其他教程。以上安装流程走完了之后，想必各位都有一套github上选的博客模板，就博主可以认为，这些博客的页面可以说得过去，也算挺好看的，毕竟，博客还是内容为王，但是博客在想，自己熟悉一些简单的html、css、js，所有，心就有点大了，想要一个更好的一个博客页面。如果大家也有类似的想法，那么接下来我们开始进入到博客页面升级版的道路吧！       1. 选中一套自己喜欢的主题，我以本博客模板为例来讲解。    2. 首先Fork一下或者Download一份本项目的代码。    3. 修改一下_config_yaml及readme.md文件，变更个人信息。    4. 将本项目放入自己博客项目中的themes文件夹中，我的文件结构是 hk_blog/hexo/themes,在themes有一个默认主题landscape,我们只需要将我们自己       下载的主题模板放在和landscape并列的文件夹中即可。    5. 修改hexo文件下的_config.yml中的themes属性值，改为自己下载的主题。    6. hexo启动服务即可访问本项目。</code></pre><p>以上是我搭建博客的一点历程！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;strong&gt;在github上搭建一个个人博客一直是我的想法。2年前，我的一个朋友陆沉也推荐过，曾经简单地弄了下，仅搭建好了一个空的框架，没有在里面发表任何博文，现在回想起来，很是遗憾！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活琐事" scheme="https://shangrila-kun.github.io/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/"/>
    
    
      <category term="我的博客" scheme="https://shangrila-kun.github.io/tags/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
